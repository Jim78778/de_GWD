#!/bin/bash
clear
blue()   { echo -e "\033[34m\033[01m $1 \033[0m"; }
yellow() { echo -e "\033[33m\033[01m $1 \033[0m"; }
green()  { echo -e "\033[32m\033[01m $1 \033[0m"; }
red()    { echo -e "\033[31m\033[01m $1 \033[0m"; }



installDOH(){
cd ~
wget -O ~/doh.zip https://raw.githubusercontent.com/jacyl4/de_GWD/master/resource/dohamd64.zip
unzip doh.zip
mv -f ~/doh/doh-server /usr/local/bin/doh-server
chmod +x /usr/local/bin/doh-server
rm -rf ~/doh*

mkdir -p /etc/dns-over-https
cat > /etc/dns-over-https/doh-server.conf << EOF
listen = [ "127.0.0.1:8053" ]
path = "/dq"

upstream = [ "udp:127.0.0.1:5390" ]

timeout = 10
tries = 3
verbose = false
log_guessed_client_ip = false
EOF

mkdir -p /etc/NetworkManager/dispatcher.d
cat > /etc/NetworkManager/dispatcher.d/doh-server << "EOF"
#!/bin/bash
case "$2" in
    up)
        /usr/bin/systemctl is-active doh-server.service > /dev/null && /usr/bin/systemctl restart doh-server.service
        ;;
    down)
        /usr/bin/systemctl is-active doh-server.service > /dev/null && /usr/bin/systemctl restart doh-server.service
        ;;
    *)
        exit 0
        ;;
esac
EOF
chmod +x /etc/NetworkManager/dispatcher.d/doh-server

touch /run/doh-server.pid
cat > /lib/systemd/system/doh-server.service << "EOF"
[Unit]
Description=DNS-over-HTTPS server
After=network.target
Wants=network.target

[Service]
Type=simple
PIDFile=/run/doh-server.pid
AmbientCapabilities=CAP_NET_BIND_SERVICE
ExecStart=/usr/local/bin/doh-server -conf /etc/dns-over-https/doh-server.conf
Restart=always
RestartSec=2s
LimitNPROC=1000000
LimitNOFILE=1000000

[Install]
WantedBy=multi-user.target
EOF
systemctl daemon-reload
systemctl enable doh-server
systemctl restart doh-server
}



v2rayADD(){
read -d '' vtruiIn << EOF
	{
    "port": 11811,
    "listen": "127.0.0.1",
    "protocol": "vmess",
    "sniffing": {"enabled": true, "destOverride": ["http", "tls"]},
    "settings": {
      "clients": [{
        "id": "00000000-0000-0000-0000-000000000000",
        "level": 1,
        "alterId": 64
        }]
      },
    "streamSettings": {
      "network": "ws",
      "wsSettings": {
        "path": "/0000"
        }
      }
    }
EOF

jq --argjson vtruiIn "$vtruiIn" '.inbounds[2] = $vtruiIn' /etc/vtrui/config.json |\
jq --arg uuidnum "$uuidnum" '.inbounds[2].settings.clients[0].id=$uuidnum' |\
jq --arg v2path "$v2path" '.inbounds[2].streamSettings.wsSettings.path=$v2path' > /etc/vtrui/temp.json && mv -f /etc/vtrui/temp.json /etc/vtrui/config.json
}



iptablesProxyADD(){
cat > /usr/local/bin/iptables-proxy-up << "EOF"
#!/bin/bash
ipset -X chnroute
ipset -X hosts
ipset -X lanip
ipset -X listB
ipset -X listW
ipset -X listWlan

lanip="0.0.0.0/8 \
100.64.0.0/10 \
127.0.0.0/8 \
169.254.0.0/16 \
10.0.0.0/8 \
172.16.0.0/12 \
192.168.0.0/16 \
255.255.255.255/32 \
114.114.114.114/32 \
114.114.115.115/32 \
119.29.29.29/32 \
119.28.28.28/32 \
223.5.5.5/32 \
223.6.6.6/32"

ipset -R < /usr/local/bin/chnrouteset

ipset -N lanip hash:net maxelem 65535
for iplanip in $lanip; do
  ipset add lanip $iplanip
done

ipset -N hosts hash:net maxelem 65535
for hosts in $(jq -r '.dns.hosts[]' /etc/vtrui/config.json); do
  ipset add hosts $hosts
done

ipset -N listB hash:net maxelem 65535
for iplistB in $(cat /var/www/html/listBip.txt); do
  ipset add listB $iplistB
done

ipset -N listW hash:net maxelem 65535
for iplistW in $(cat /var/www/html/listWip.txt); do
  ipset add listW $iplistW
done

ipset -N listWlan hash:net maxelem 65535
for iplistWlan in $(cat /var/www/html/listWlan.txt); do
  ipset add listWlan $iplistWlan
done

ip rule add fwmark 0x9 table 100 pref 100
ip route add local default dev lo table 100

iptables -A INPUT -p udp --dport 53 -s 127.0.0.1,172.17.0.0/24,172.16.66.0/24 -j ACCEPT
iptables -A INPUT -p tcp --dport 53 -s 127.0.0.1,172.17.0.0/24,172.16.66.0/24 -j ACCEPT

iptables -A INPUT -p udp --dport 53 -i $(ip --oneline link show up | grep -v "lo" | awk '{print $2}' | cut -d':' -f1 | cut -d'@' -f1 | awk 'NR==1{print}') -j DROP
iptables -A INPUT -p tcp --dport 53 -i $(ip --oneline link show up | grep -v "lo" | awk '{print $2}' | cut -d':' -f1 | cut -d'@' -f1 | awk 'NR==1{print}') -j DROP

iptables -t mangle -N V2PROXY
iptables -t mangle -A V2PROXY -p tcp --dport 53 -j ACCEPT
iptables -t mangle -A V2PROXY -p udp --dport 53 -j ACCEPT
iptables -t mangle -A V2PROXY -p tcp --dport 5370 -j ACCEPT
iptables -t mangle -A V2PROXY -p udp --dport 5370 -j ACCEPT
iptables -t mangle -A V2PROXY -p tcp --dport 5380 -j ACCEPT
iptables -t mangle -A V2PROXY -p udp --dport 5380 -j ACCEPT
iptables -t mangle -A V2PROXY -p tcp --dport 5390 -j ACCEPT
iptables -t mangle -A V2PROXY -p udp --dport 5390 -j ACCEPT
iptables -t mangle -A V2PROXY -p udp --dport $(awk 'NR==2{print}' /var/www/html/WGaddress.txt) -j ACCEPT
iptables -t mangle -A V2PROXY -m set --match-set chnroute dst -j ACCEPT
iptables -t mangle -A V2PROXY -m set --match-set hosts dst -j ACCEPT
iptables -t mangle -A V2PROXY -m set --match-set lanip dst -j ACCEPT
iptables -t mangle -A V2PROXY -m set --match-set listW dst -j ACCEPT
iptables -t mangle -A V2PROXY -m set --match-set listWlan src -j ACCEPT
iptables -t mangle -A V2PROXY -m mark --mark 0xff -j ACCEPT

iptables -t mangle -A V2PROXY -m set --match-set listB dst -j MARK --set-mark 0x9

iptables -t mangle -A V2PROXY -p tcp -j MARK --set-mark 0x9
iptables -t mangle -A V2PROXY -p udp -j MARK --set-mark 0x9

iptables -t mangle -A OUTPUT -p tcp -j V2PROXY
iptables -t mangle -A OUTPUT -p udp -j V2PROXY

iptables -t mangle -A PREROUTING -p tcp -m mark ! --mark 0x9 -j V2PROXY
iptables -t mangle -A PREROUTING -p udp -m mark ! --mark 0x9 -j V2PROXY

iptables -t mangle -A PREROUTING -p tcp -j TPROXY --on-ip 127.0.0.1 --on-port 9896 --tproxy-mark 0x9
iptables -t mangle -A PREROUTING -p udp -j TPROXY --on-ip 127.0.0.1 --on-port 9896 --tproxy-mark 0x9

systemctl restart doh-client
systemctl restart vtrui

if [[ $(ip --oneline link show up | grep -v "lo" | awk '{print $2}') =~ "wg0" ]]; then
systemctl restart wg-quick@wg0
fi

EOF
chmod +x /usr/local/bin/iptables-proxy-up

systemctl restart iptables-proxy
}



nginxWebConf(){
cat > /etc/nginx/conf.d/default.conf<< EOF
server {
  listen $httpPORT;
  server_name $vpsdomain;
  return 301 https://\$server_name\$request_uri;
}

server {
  listen $httpsPORT ssl http2 spdy fastopen=64 reuseport;
  server_name $vpsdomain;
  root /var/www/html;
  index index.php index.html index.htm;

  ssl_certificate /var/www/ssl/fullchain.cer;
  ssl_certificate_key /var/www/ssl/$(echo $vpsdomain | awk -F. '{print $2"."$3}').key;
  ssl_dhparam /var/www/ssl/dhparam.pem;
  ssl_protocols TLSv1.2 TLSv1.3;
  ssl_prefer_server_ciphers on;
  ssl_ciphers TLS13+AESGCM+AES128:TLS13+AESGCM+AES256:TLS13+CHACHA20:EECDH+ECDSA+AESGCM+AES128:EECDH+ECDSA+CHACHA20:EECDH+ECDSA+AESGCM+AES256:EECDH+ECDSA+AES128+SHA:EECDH+ECDSA+AES256+SHA:EECDH+aRSA+AESGCM+AES128:EECDH+aRSA+CHACHA20:EECDH+aRSA+AESGCM+AES256:EECDH+aRSA+AES128+SHA:EECDH+aRSA+AES256+SHA:RSA+AES128+SHA:RSA+AES256+SHA:RSA+3DES;
  ssl_session_timeout 10m;
  ssl_session_cache shared:le_nginx_SSL:10m;
  ssl_buffer_size 1400;

  ssl_early_data on;
  proxy_set_header Early-Data \$ssl_early_data;

  ssl_stapling on;
  ssl_stapling_verify on;
  ssl_stapling_file /var/www/ssl/ocsp.resp;
  resolver 1.1.1.1 valid=600s;
  resolver_timeout 5s;

location ~* \.php$ {
  fastcgi_pass            unix:/run/php/php7.3-fpm.sock;
  fastcgi_index           index.php;
  fastcgi_split_path_info ^(.+\.php)(.*)$;
  include                 fastcgi_params;
  fastcgi_param           SCRIPT_FILENAME \$document_root\$fastcgi_script_name;
}

location /dq {
  proxy_set_header Host \$host;
  proxy_set_header X-Real-IP \$remote_addr;
  proxy_pass              http://127.0.0.1:8053/dq;
}

location $v2path {
  proxy_http_version      1.1;
  proxy_set_header Host \$http_host;
  proxy_set_header Upgrade WebSocket;
  proxy_set_header Connection "upgrade";
  proxy_set_header X-Real-IP \$remote_addr;
  proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
  proxy_read_timeout      86400;
  keepalive_requests      25600;
  keepalive_timeout       300 300;
  proxy_redirect          off;
  proxy_buffering         off;
  proxy_pass              http://127.0.0.1:11811;
}

}
EOF
}



de_GWDadd(){
    green "========================="
    green " V2ray UUID"
    green "========================="
    read uuidnum

    green "========================="
    green " Path"
    green "========================="
    read v2path

    green "==========================="
    green " domain"
    green "==========================="
    read vpsdomain

    green "==========================="
    green " http port"
    green "==========================="
    read httpPORT

    green "==========================="
    green " https port"
    green "==========================="
    read httpsPORT
cd ~

installDOH

v2rayADD

iptablesProxyADD

nginxWebConf

mkdir -p /var/www/ssl
chown -R www-data:www-data /var/www/ssl
chmod -R 600 /var/www/ssl

docker stop nginx > /dev/null 2>&1
docker rm nginx > /dev/null 2>&1

docker run -d --name=nginx --net=host --restart=always \
-v /etc/localtime:/etc/localtime \
-v /etc/nginx/nginx.conf:/etc/nginx/nginx.conf \
-v /etc/nginx/conf.d/default.conf:/etc/nginx/conf.d/default.conf \
-v /var/www/ssl/:/var/www/ssl/ \
-v /var/www/html/:/var/www/html/ \
-v /run/php/php7.3-fpm.sock:/run/php/php7.3-fpm.sock \
jacyl4/nginx_tls1.3:latest

rm -rf ~/seradd
}



makeSSL(){
    green "==========================="
    green " domain (no www)"
    green "==========================="
    read vpsdomain

    green "==========================="
    green " Cloudflare API KEY"
    green "==========================="
    read CFapikey

    green "==========================="
    green " Cloudflare Email"
    green "==========================="
    read CFemail

apt update && apt install --no-install-recommends --no-install-suggests -y socat

cd ~
mkdir -p /var/www/ssl
rm -rf /var/www/ssl/*

export CF_Key="$CFapikey"
export CF_Email="$CFemail"

curl https://get.acme.sh | sh
~/.acme.sh/acme.sh --issue --dns dns_cf -d $vpsdomain -d *.$vpsdomain --keylength ec-256
~/.acme.sh/acme.sh --installcert -d $vpsdomain --ecc \
               --keypath        /var/www/ssl/$vpsdomain.key  \
               --fullchain-file /var/www/ssl/fullchain.cer \
               --reloadcmd     "docker restart nginx > /dev/null 2>&1"
openssl dhparam -out /var/www/ssl/dhparam.pem 2048

cat > /var/www/ssl/update_ocsp_cache << EOF
#!/bin/bash
wget -O intermediate.pem https://letsencrypt.org/certs/lets-encrypt-x3-cross-signed.pem
wget -O root.pem https://ssl-tools.net/certificates/dac9024f54d8f6df94935fb1732638ca6ad77c13.pem
mv intermediate.pem /var/www/ssl
mv root.pem /var/www/ssl
cat /var/www/ssl/intermediate.pem > /var/www/ssl/bundle.pem
cat /var/www/ssl/root.pem >> /var/www/ssl/bundle.pem

openssl ocsp -no_nonce \
    -issuer  /var/www/ssl/intermediate.pem \
    -cert    /var/www/ssl/fullchain.cer \
    -CAfile  /var/www/ssl/bundle.pem \
    -VAfile  /var/www/ssl/bundle.pem \
    -url     http://ocsp.int-x3.letsencrypt.org \
    -respout /var/www/ssl/ocsp.resp
EOF
chmod +x /var/www/ssl/update_ocsp_cache
/var/www/ssl/update_ocsp_cache

crontab -l > now.cron
if [[ "$(crontab -l | grep 'update_ocsp_cache' | awk '{print $6}')" != "/var/www/ssl/update_ocsp_cache" ]]; then
echo '0 0 * * 7 /var/www/ssl/update_ocsp_cache' >> now.cron
fi
crontab now.cron
rm -rf now.cron
}



start_menu(){

    green  "1. de_GWD add"
    green  "2. make SSL"
    red    "CTRL+C EXIT"
    echo
    read -p "Select:" num
    case "$num" in
    1)
    de_GWDadd
    start_menu
    ;;
    1)
    makeSSL
    start_menu
    ;;
    *)
    clear
    red "Wrong number"
    sleep 1s
    start_menu
    ;;
    esac
}

start_menu