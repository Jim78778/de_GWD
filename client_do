#!/bin/bash
clear
blue()   { echo -e "\033[34m\033[01m $1 \033[0m"; }
yellow() { echo -e "\033[33m\033[01m $1 \033[0m"; }
green()  { echo -e "\033[32m\033[01m $1 \033[0m"; }
red()    { echo -e "\033[31m\033[01m $1 \033[0m"; }



mirrorSite="http://xznat.seso.icu:10178"

smartdns_amd64="https://github.com/pymumu/smartdns/releases/download/Release28/smartdns.1.2019.12.15-1028.x86_64-debian-all.deb"

statuSuccess=$(green "[ OK ]")
statusFailed=$(red "[ failed ]")



preInstall(){
systemctl stop iptables-proxy > /dev/null 2>&1

rm -rf /etc/resolv.conf
cat << EOF > /etc/resolv.conf
nameserver 119.29.29.29
nameserver 223.5.5.5
nameserver 119.28.28.28
nameserver 223.6.6.6
EOF

cat << EOF > /etc/security/limits.conf
* soft nofile 1000000
* hard nofile 1000000
* soft nproc 1000000
* hard nproc 1000000
EOF
echo "ulimit -n 1000000" > ~/.bash_profile

cat << EOF > /etc/sysctl.conf
vm.overcommit_memory = 1
vm.swappiness = 10
fs.file-max = 1000000
fs.inotify.max_user_instances = 1000000
fs.inotify.max_user_watches = 1000000
net.ipv6.conf.all.disable_ipv6 = 1
net.ipv6.conf.default.disable_ipv6 = 1
net.ipv6.conf.lo.disable_ipv6 = 1
net.ipv4.ip_forward = 1
net.ipv4.ip_local_port_range = 1025 65535
net.ipv4.tcp_window_scaling = 1
net.ipv4.tcp_timestamps = 1
net.ipv4.tcp_tw_reuse =1
net.ipv4.tcp_sack = 1
net.ipv4.tcp_fack = 1
net.ipv4.tcp_fastopen = 3
net.ipv4.tcp_syncookies = 1
net.ipv4.tcp_fin_timeout = 30
net.ipv4.tcp_syn_retries = 1
net.ipv4.tcp_synack_retries = 1
net.ipv4.tcp_max_syn_backlog = 32768
net.ipv4.tcp_max_tw_buckets = 6000
net.ipv4.tcp_max_orphans = 32768
net.ipv4.tcp_rmem = 4096 87380 8388608
net.ipv4.tcp_wmem = 4096 87380 8388608
net.core.rmem_max = 8388608
net.core.wmem_max = 8388608
net.core.somaxconn = 32768
net.core.netdev_max_backlog = 32768
EOF

if [[ "$(uname -r)" =~ "bbrplus" ]]; then
sed -i "/net.core.default_qdisc/d" /etc/sysctl.conf
sed -i '/net.ipv4.tcp_congestion_control/d' /etc/sysctl.conf
echo "net.core.default_qdisc = fq" >> /etc/sysctl.conf
echo "net.ipv4.tcp_congestion_control = bbrplus" >> /etc/sysctl.conf
else
sed -i "/net.core.default_qdisc/d" /etc/sysctl.conf
sed -i '/net.ipv4.tcp_congestion_control/d' /etc/sysctl.conf
echo "net.core.default_qdisc = fq" >> /etc/sysctl.conf
echo "net.ipv4.tcp_congestion_control = bbr" >> /etc/sysctl.conf
fi

sysctl -p

sed -i '/ip6-/d' /etc/hosts

systemctl mask --now systemd-resolved > /dev/null 2>&1
systemctl daemon-reload > /dev/null 2>&1
rm -rf /run/resolvconf/interface/systemd-resolved

echo "Asia/Shanghai" > /etc/timezone
ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime

date -s "$(wget -qSO- --max-redirect=0 baidu.com 2>&1 | grep Date: | cut -d' ' -f5-8)Z"
hwclock -w

cat << EOF > /etc/apt/apt.conf.d/01InstallLess
APT::Install-Recommends "false";
APT::Install-Suggests "false";
Dpkg::Options {
  "--force-confdef";
  "--force-confnew";
};
EOF

cat << EOF > /etc/apt/sources.list
deb http://mirrors.aliyun.com/debian $(cat /etc/os-release | grep VERSION= | cut -d '(' -f2 | cut -d ')' -f1) main
deb http://mirrors.aliyun.com/debian-security $(cat /etc/os-release | grep VERSION= | cut -d '(' -f2 | cut -d ')' -f1)/updates main
deb http://mirrors.aliyun.com/debian $(cat /etc/os-release | grep VERSION= | cut -d '(' -f2 | cut -d ')' -f1)-updates main
EOF

rm -rf /etc/apt/sources.list.d/*

apt update && apt install -y sudo locales net-tools dnsutils ipset wget curl git jq unzip ca-certificates apt-transport-https gnupg2
source /etc/profile

echo "en_US.UTF-8 UTF-8" > /etc/locale.gen
cat << EOF > /etc/default/locale
LANG=en_US.UTF-8
LANGUAGE=en_US.UTF-8
LC_CTYPE="en_US.UTF-8"
LC_NUMERIC="en_US.UTF-8"
LC_TIME="en_US.UTF-8"
LC_COLLATE="en_US.UTF-8"
LC_MONETARY="en_US.UTF-8"
LC_MESSAGES="en_US.UTF-8"
LC_PAPER="en_US.UTF-8"
LC_NAME="en_US.UTF-8"
LC_ADDRESS="en_US.UTF-8"
LC_TELEPHONE="en_US.UTF-8"
LC_MEASUREMENT="en_US.UTF-8"
LC_IDENTIFICATION="en_US.UTF-8"
LC_ALL=en_US.UTF-8
EOF
locale-gen en_US.UTF-8
}



installDOH(){
cd ~
portcheck=$(echo $port | grep '^[0-9]\+$')
if [[ $portcheck = "" ]] || [[ $portcheck = "443" ]]; then
doh=$domain
port="443"
else
doh="$domain:$port"
fi

domainip=$(nslookup $domain | awk '/Address/ {print$2}' | sed '1d' | sed '/[a-z]/d')

sed -i "1i $domainip $doh" /etc/hosts

wget --no-check-certificate -O ~/doh.zip $mirrorSite/dohamd64.zip
unzip doh.zip
mv -f ~/doh/doh-client /usr/local/bin/doh-client
chmod +x /usr/local/bin/doh-client
rm -rf ~/doh*

mkdir -p /etc/dns-over-https/
cat << EOF > /etc/dns-over-https/doh-client.conf
listen = [ "127.0.0.1:5380", ]

[upstream]
upstream_selector = "weighted_round_robin"

# DoH1
[[upstream.upstream_ietf]]
    url = "https://xxx.ooo/dq"
    weight = 50

# DoH2
[[upstream.upstream_ietf]]
    url = "https://xxx.ooo/dq"
    weight = 50

[others]
timeout = 30
no_cookies = true
no_ecs = true
no_ipv6 = true
verbose = false
EOF

doh_upstream='url = "https:\/\/'$doh'\/dq"'
sed -i "/url/c\\$doh_upstream" /etc/dns-over-https/doh-client.conf

mkdir -p /etc/NetworkManager/dispatcher.d/
cat << "EOF" > /etc/NetworkManager/dispatcher.d/doh-client
#!/bin/bash
case "$2" in
    up)
        /usr/bin/systemctl is-active doh-client.service > /dev/null && /usr/bin/systemctl restart doh-client.service
        ;;
    down)
        /usr/bin/systemctl is-active doh-client.service > /dev/null && /usr/bin/systemctl restart doh-client.service
        ;;
    *)
        exit 0
        ;;
esac
EOF
chmod +x /etc/NetworkManager/dispatcher.d/doh-client

echo "" > /run/doh-client.pid
cat << "EOF" > /lib/systemd/system/doh-client.service
[Unit]
Description=DNS-over-HTTPS Client
After=network.target
Before=nss-lookup.target
Wants=network.target

[Service]
Type=simple
PIDFile=/run/doh-client.pid
AmbientCapabilities=CAP_NET_BIND_SERVICE
ExecStart=/usr/local/bin/doh-client -conf /etc/dns-over-https/doh-client.conf
Restart=always
RestartSec=5
LimitNPROC=1000000
LimitNOFILE=1000000

[Install]
WantedBy=multi-user.target
EOF

systemctl daemon-reload > /dev/null 2>&1
systemctl enable doh-client > /dev/null 2>&1
systemctl restart doh-client > /dev/null 2>&1
}



installV2ray(){
cd ~
mkdir -p /usr/bin/vtrui
mkdir -p /etc/vtrui

wget --no-check-certificate -O ~/vtrui.zip $mirrorSite/vtamd64.zip
unzip vtrui.zip
mv -f ~/vtrui/vtrui /usr/bin/vtrui/vtrui
mv -f ~/vtrui/v2ctl /usr/bin/vtrui/v2ctl
mv -f ~/vtrui/geoip.dat /usr/bin/vtrui/geoip.dat
chmod +x /usr/bin/vtrui/vtrui
chmod +x /usr/bin/vtrui/v2ctl
rm -rf ~/vtrui*

cat << EOF > /etc/vtrui/config.json
{
"dns": {
  "tag": "flow",
  "hosts": {
    "localhost": "127.0.0.1"
  },
  "servers": [
    {
      "address": "127.0.0.1",
      "port": 5380
    }
  ]
},
"inbounds": [
  {
    "tag": "dnsin",
    "port": 53,
    "listen": "0.0.0.0",
    "protocol": "dokodemo-door",
    "settings": {"address": "0.0.0.0", "port": 53, "network": "tcp,udp"}
  },
  {
    "port": 9896,
    "listen": "127.0.0.1",
    "protocol": "dokodemo-door",
    "sniffing": {"enabled": true, "destOverride": ["http", "tls"]},
    "settings": {"network": "tcp,udp", "followRedirect": true},
    "streamSettings": { "sockopt": { "tproxy": "tproxy" } }
  }
],
"outbounds": [
  {
    "protocol":"vmess",
    "settings":{"vnext":[{
          "address":"xxxx.ooo",
          "port":443,
          "users":[
            {
              "id": "00000000-0000-0000-0000-000000000000",
              "level": 1,
              "alterId": 4,
              "security": "auto"
            }
          ]
        }
      ]
    },
    "streamSettings":{
      "network":"ws",
      "wsSettings":{
        "path":"/000000",
        "headers":{
          "Host":"xxxx.ooo"
        }
      },
      "security":"tls",
      "tlsSettings":{
        "serverName":"xxxx.ooo",
        "allowInsecure":false
      },
      "sockopt":{"mark":255}
    }
  },
  {"tag":"direct","protocol":"freedom","streamSettings":{"sockopt":{"mark":255}}},
  {"tag":"dnsout","protocol":"dns"}
],
"routing": {
  "domainStrategy": "AsIs",
  "rules": [
    {"type":"field","inboundTag":"dnsin","outboundTag":"dnsout"},
    {"type":"field","inboundTag":"flow","outboundTag":"direct"}
  ]
}
}
EOF

jq --arg domain "$domain" '.outbounds[0].settings.vnext[0].address=$domain' /etc/vtrui/config.json |\
jq --argjson port "$port" '.outbounds[0].settings.vnext[0].port=$port' |\
jq --arg uuidnum "$uuidnum" '.outbounds[0].settings.vnext[0].users[0].id=$uuidnum' |\
jq --arg v2path "$v2path" '.outbounds[0].streamSettings.wsSettings.path=$v2path' |\
jq --arg domain "$domain" '.outbounds[0].streamSettings.wsSettings.headers.Host=$domain' |\
jq --arg domain "$domain" '.outbounds[0].streamSettings.tlsSettings.serverName=$domain' |\
jq --arg key $doh --arg value $domainip '.dns.hosts += {($key): ($value)}' |\
jq --arg key $domain --arg value $domainip '.dns.hosts += {($key): ($value)}' > /etc/vtrui/temp.json && mv -f /etc/vtrui/temp.json /etc/vtrui/config.json

echo "" > /run/vtrui.pid
cat << EOF > /lib/systemd/system/vtrui.service
[Unit]
Description=vtrui Service
After=network.target
Wants=network.target

[Service]
Type=simple
PIDFile=/run/vtrui.pid
ExecStart=/usr/bin/vtrui/vtrui -config /etc/vtrui/config.json
Restart=on-failure
RestartPreventExitStatus=23

[Install]
WantedBy=multi-user.target
EOF

systemctl daemon-reload > /dev/null 2>&1
systemctl enable vtrui > /dev/null 2>&1
}



installIptablesProxy(){
cat << "EOF" > /usr/local/bin/iptables-proxy-up
#!/bin/bash
ipset -X chnroute
ipset -X hosts
ipset -X lanip
ipset -X listB
ipset -X listW
ipset -X listWlan

lanip="0.0.0.0/8 \
100.64.0.0/10 \
127.0.0.0/8 \
169.254.0.0/16 \
10.0.0.0/8 \
172.16.0.0/12 \
192.168.0.0/16 \
255.255.255.255/32 \
114.114.114.114/32 \
114.114.115.115/32 \
119.29.29.29/32 \
119.28.28.28/32 \
223.5.5.5/32 \
223.6.6.6/32"

ipset -R < /usr/local/bin/chnrouteset

ipset -N lanip hash:net maxelem 65535
for iplanip in $lanip; do
  ipset add lanip $iplanip
done

ipset -N hosts hash:net maxelem 65535
for hosts in $(jq -r '.dns.hosts[]' /etc/vtrui/config.json); do
  ipset add hosts $hosts
done

ipset -N listB hash:net maxelem 65535
for iplistB in $(jq -r '.listB | to_entries[] | .value' /usr/local/bin/0conf); do
  ipset add listB $iplistB
done

ipset -N listW hash:net maxelem 65535
for iplistW in $(jq -r '.listW | to_entries[] | .value' /usr/local/bin/0conf); do
  ipset add listW $iplistW
done

ipset -N listWlan hash:net maxelem 65535
for iplistWlan in $(jq -r '.listWlan[]' /usr/local/bin/0conf); do
  ipset add listWlan $iplistWlan
done

ip rule add fwmark 0x9 table 100 pref 100
ip route add local 0.0.0.0/0 dev lo table 100

iptables -A INPUT -p udp --dport 53 -s 127.0.0.1,172.17.0.0/24,172.16.66.0/24 -j ACCEPT
iptables -A INPUT -p tcp --dport 53 -s 127.0.0.1,172.17.0.0/24,172.16.66.0/24 -j ACCEPT

iptables -t mangle -N V2PROXY
iptables -t mangle -A V2PROXY -p tcp --dport 53 -j ACCEPT
iptables -t mangle -A V2PROXY -p udp --dport 53 -j ACCEPT
iptables -t mangle -A V2PROXY -p tcp --dport 5370 -j ACCEPT
iptables -t mangle -A V2PROXY -p udp --dport 5370 -j ACCEPT
iptables -t mangle -A V2PROXY -p tcp --dport 5380 -j ACCEPT
iptables -t mangle -A V2PROXY -p udp --dport 5380 -j ACCEPT
iptables -t mangle -A V2PROXY -p tcp --dport 5390 -j ACCEPT
iptables -t mangle -A V2PROXY -p udp --dport 5390 -j ACCEPT
iptables -t mangle -A V2PROXY -p udp --dport $(jq -r '.wireguard.WGport' /usr/local/bin/0conf) -j ACCEPT
iptables -t mangle -A V2PROXY -m set --match-set chnroute dst -j ACCEPT
iptables -t mangle -A V2PROXY -m set --match-set hosts dst -j ACCEPT
iptables -t mangle -A V2PROXY -m set --match-set lanip dst -j ACCEPT
iptables -t mangle -A V2PROXY -m set --match-set listW dst -j ACCEPT
iptables -t mangle -A V2PROXY -m set --match-set listWlan src -j ACCEPT
iptables -t mangle -A V2PROXY -m mark --mark 0xff -j ACCEPT

iptables -t mangle -A V2PROXY -m set --match-set listB dst -j MARK --set-mark 0x9

iptables -t mangle -A V2PROXY -p tcp -j MARK --set-mark 0x9
iptables -t mangle -A V2PROXY -p udp -j MARK --set-mark 0x9

iptables -t mangle -A OUTPUT -p tcp -j V2PROXY
iptables -t mangle -A OUTPUT -p udp -j V2PROXY

iptables -t mangle -A PREROUTING -p tcp -m mark ! --mark 0x9 -j V2PROXY
iptables -t mangle -A PREROUTING -p udp -m mark ! --mark 0x9 -j V2PROXY

iptables -t mangle -A PREROUTING -p tcp -j TPROXY --on-ip 127.0.0.1 --on-port 9896 --tproxy-mark 0x9
iptables -t mangle -A PREROUTING -p udp -j TPROXY --on-ip 127.0.0.1 --on-port 9896 --tproxy-mark 0x9

systemctl restart doh-client
systemctl restart vtrui

if [[ $(ip --oneline link show up | grep -v "lo" | awk '{print $2}') =~ "wg0" ]]; then
systemctl restart wg-quick@wg0
fi

EOF
chmod +x /usr/local/bin/iptables-proxy-up

cat << EOF > /usr/local/bin/iptables-proxy-down
#!/bin/bash
systemctl stop doh-client
systemctl stop vtrui

iptables -t mangle -F
iptables -t mangle -X
iptables -t nat -F
iptables -t nat -X
iptables -F
iptables -X

ipset -F chnroute
ipset -F hosts
ipset -F lanip
ipset -F listB
ipset -F listW
ipset -F listWlan

ip route flush table 100
ip rule del fwmark 0x9
EOF
chmod +x /usr/local/bin/iptables-proxy-down

cat << EOF > /lib/systemd/system/iptables-proxy.service
[Unit]
Description=iptables-proxy
After=network.target
Wants=network.target

[Service]
Type=oneshot
RemainAfterExit=yes
ExecStart=/usr/local/bin/iptables-proxy-up
ExecStop=/usr/local/bin/iptables-proxy-down

[Install]
WantedBy=multi-user.target
EOF

systemctl daemon-reload > /dev/null 2>&1
systemctl enable iptables-proxy > /dev/null 2>&1
systemctl restart iptables-proxy > /dev/null 2>&1

rm -rf /etc/resolv.conf
cat << EOF > /etc/resolv.conf
option use-vc
nameserver 127.0.0.1
EOF

echo
if [[ $(curl -4skI -o /dev/null -w %{http_code} www.google.com | awk '{print$1;exit}') =~ "20" ]]; then
    echo "$statuSuccess de_GWD server access"
    echo "$statuSuccess de_GWD server access"
    echo "$statuSuccess de_GWD server access"
else
    echo "$statusFailed de_GWD server access"
    echo "$statusFailed de_GWD server access"
    echo "$statusFailed de_GWD server access"
    exit
fi
echo
}



installWGdoPHP(){
cd ~
cat << EOF > /etc/apt/sources.list
deb http://deb.debian.org/debian $(cat /etc/os-release | grep VERSION= | cut -d '(' -f2 | cut -d ')' -f1) main
deb http://deb.debian.org/debian-security/ $(cat /etc/os-release | grep VERSION= | cut -d '(' -f2 | cut -d ')' -f1)/updates main
deb http://deb.debian.org/debian $(cat /etc/os-release | grep VERSION= | cut -d '(' -f2 | cut -d ')' -f1)-updates main
EOF

echo "deb http://deb.debian.org/debian/ unstable main" > /etc/apt/sources.list.d/unstable.list
printf 'Package: *\nPin: release a=unstable\nPin-Priority: 90\n' > /etc/apt/preferences.d/limit-unstable

echo "deb [arch=amd64] https://download.docker.com/linux/debian $(cat /etc/os-release | grep VERSION= | cut -d '(' -f2 | cut -d ')' -f1) stable" | sudo tee /etc/apt/sources.list.d/docker.list
curl -fsSL https://download.docker.com/linux/debian/gpg | sudo apt-key add -

echo "deb https://packages.sury.org/php/ $(cat /etc/os-release | grep VERSION= | cut -d '(' -f2 | cut -d ')' -f1) main" | sudo tee /etc/apt/sources.list.d/php.list
wget -O /etc/apt/trusted.gpg.d/php.gpg https://packages.sury.org/php/apt.gpg

apt update && apt install -y linux-headers-$(uname -r) libmnl-dev libelf-dev bc gcc make wireguard-tools haveged \
docker-ce docker-ce-cli containerd.io \
php7.4-fpm php7.4-common php7.4-cgi php7.4-json php7.4-sqlite3 sqlite3 subversion rsync

systemctl enable --now haveged
sed -i "/www-data/d" /etc/sudoers
sed -i "/Allow members of group sudo to execute any command/a\www-data ALL=(root)  NOPASSWD:ALL" /etc/sudoers

git clone https://git.zx2c4.com/wireguard-linux-compat
cd ~/wireguard-linux-compat/src
make && make install
rm -rf ~/wireguard-linux-compat
cd ~

systemctl enable docker
systemctl restart docker

cat << EOF > /etc/php/7.4/fpm/php-fpm.conf
[global]
pid = /run/php/php7.4-fpm.pid
error_log = /var/log/php7.4-fpm.log

emergency_restart_threshold = 20
emergency_restart_interval = 60s
process_control_timeout = 10s
daemonize = yes

rlimit_files = 1000000
rlimit_core = 0

include=/etc/php/7.4/fpm/pool.d/*.conf
EOF

cat << EOF > /etc/php/7.4/fpm/pool.d/www.conf
[www]
user = www-data
group = www-data
listen = /run/php/php7.4-fpm.sock
listen.owner = www-data
listen.group = www-data
listen.backlog = -1
listen.allowed_clients = 127.0.0.1
listen.mode = 0666

pm = dynamic
pm.max_children = 20
pm.start_servers = 5
pm.min_spare_servers = 5
pm.max_spare_servers = 20
pm.max_requests = 500
pm.process_idle_timeout = 10s
request_terminate_timeout = 320s
request_slowlog_timeout = 0

pm.status_path = /status

catch_workers_output = yes
env[HOSTNAME] = \$HOSTNAME
env[PATH] = /usr/local/bin:/usr/bin:/bin
env[TMP] = /tmp
env[TMPDIR] = /tmp
env[TEMP] = /tmp
EOF

sed -i "/cgi.fix_pathinfo=/c\cgi.fix_pathinfo=0" /etc/php/7.4/fpm/php.ini

rm -rf /lib/systemd/system/php7.4-fpm.service
cat << "EOF" > /lib/systemd/system/php7.4-fpm.service
[Unit]
Description=The PHP 7.4 FastCGI Process Manager
After=network.target
Wants=network.target

[Service] 
Type=notify
PIDFile=/run/php/php7.4-fpm.pid
ExecStart=/usr/sbin/php-fpm7.4 --nodaemonize --fpm-config /etc/php/7.4/fpm/php-fpm.conf
ExecReload=/bin/kill -USR2 $MAINPID
Restart=always
RestartSec=5
LimitNPROC=1000000
LimitNOFILE=1000000

[Install]
WantedBy=multi-user.target
EOF

systemctl daemon-reload > /dev/null 2>&1
systemctl enable php7.4-fpm
systemctl restart php7.4-fpm
}



installPihole(){
wget --no-check-certificate -O ~/smartdns.deb $smartdns_amd64
dpkg -i smartdns.deb

cat << EOF > /etc/smartdns/smartdns.conf
bind 127.0.0.1:5370
bind-tcp 127.0.0.1:5370

cache-size        10000
speed-check-mode  ping,tcp:80
force-AAAA-SOA    yes
rr-ttl            600
rr-ttl-min        60
rr-ttl-max        43200
prefetch-domain   yes

server 114.114.114.114
server 114.114.115.115
server 119.29.29.29
server 119.28.28.28
server 223.5.5.5
server 223.6.6.6
EOF

echo "" > /run/smartdns.pid
cat << "EOF" > /lib/systemd/system/smartdns.service
[Unit]
Description=Smart DNS server
After=network.target
Before=nss-lookup.target
Wants=network.target

[Service]
Type=forking
PIDFile=/run/smartdns.pid
EnvironmentFile=/etc/default/smartdns
ExecStart=/usr/sbin/smartdns $SMART_DNS_OPTS
KillMode=process
Restart=always
RestartSec=5
LimitNPROC=1000000
LimitNOFILE=1000000

[Install]
WantedBy=multi-user.target
EOF
rm -rf ~/smartdns.deb

systemctl daemon-reload > /dev/null 2>&1
systemctl enable smartdns > /dev/null 2>&1
systemctl restart smartdns > /dev/null 2>&1

mkdir -p /etc/pihole
echo "" > /etc/pihole/adlists.list
cat << EOF > /etc/pihole/setupVars.conf
PIHOLE_INTERFACE=$ethernetnum
IPV4_ADDRESS=$localaddr/24
PIHOLE_DNS_1=127.0.0.1#5380
QUERY_LOGGING=true
INSTALL_WEB_SERVER=true
INSTALL_WEB_INTERFACE=true
LIGHTTPD_ENABLED=false
BLOCKING_ENABLED=true
WEBPASSWORD=$piholePW
DNSMASQ_LISTENING=single
DNS_FQDN_REQUIRED=true
DNS_BOGUS_PRIV=true
DNSSEC=false
CONDITIONAL_FORWARDING=false
EOF
git clone --depth 1 https://github.com/pi-hole/pi-hole.git Pi-hole
bash ~/Pi-hole/"automated install"/basic-install.sh /dev/stdin --unattended
rm -rf ~/Pi-hole

systemctl mask --now dhcpcd > /dev/null 2>&1
systemctl mask --now lighttpd > /dev/null 2>&1
systemctl daemon-reload > /dev/null 2>&1
rm -rf /var/www/html/index.lighttpd.orig

cat << "EOF" > /usr/local/bin/pihole_hotfix
#!/bin/bash
localIP=$(jq -r '.address.localIP' /usr/local/bin/0conf)
sed -i "/dhcp-option=/c\dhcp-option=6,$localIP,$localIP" /etc/dnsmasq.d/02-pihole-dhcp.conf
pihole restartdns
EOF
chmod +x /usr/local/bin/pihole_hotfix

sed -i '/pihole_hotfix/d' /var/www/html/admin/scripts/pi-hole/php/savesettings.php
sed -i "/sudo pihole -a enabledhcp/a\exec('sudo /usr/local/bin/pihole_hotfix');" /var/www/html/admin/scripts/pi-hole/php/savesettings.php

cat << EOF > /etc/dnsmasq.conf
conf-dir=/etc/dnsmasq.d
port=5390
EOF

cat << EOF > /etc/pihole/dns-servers.conf
 DoH;127.0.0.1#5380
EOF

cat << EOF > /etc/pihole/pihole-FTL.conf
PRIVACYLEVEL=0
AAAA_QUERY_ANALYSIS=no
EOF

systemctl restart pihole-FTL
pihole -f
}



installNginx(){
mkdir -p "/etc/nginx"
mkdir -p "/etc/nginx/conf.d"
mkdir -p "/var/log/nginx"

rm -rf /etc/nginx/nginx.conf
cat << EOF > /etc/nginx/nginx.conf
user  www-data www-data;
pid   /run/nginx.pid;

worker_processes auto;
worker_rlimit_nofile 100000;

events {
    worker_connections  2048;
    multi_accept on;
    use epoll;
}

http {
  include mime.types;
  default_type application/octet-stream;

  fastcgi_connect_timeout 300;
  fastcgi_send_timeout 300;
  fastcgi_read_timeout 300;
  fastcgi_buffer_size 64k;
  fastcgi_buffers 4 64k;
  fastcgi_busy_buffers_size 128k;
  fastcgi_temp_file_write_size 128k;
  fastcgi_intercept_errors on;

  server_tokens             off;
  sendfile                  on;
  tcp_nodelay               on;
  tcp_nopush                on;
  keepalive_timeout         60;
  client_header_timeout     60;
  client_body_timeout       60;
  reset_timedout_connection on;
  send_timeout              60;
  types_hash_max_size       2048;

  gzip                      on;
  gzip_disable              "MSIE [1-6]\.";
  gzip_vary                 on;
  gzip_proxied              any;
  gzip_comp_level           4;
  gzip_min_length           256;
  gzip_buffers              16 8k;
  gzip_http_version         1.0;
  gzip_types    text/plain
                text/javascript
                text/css
                text/js
                text/xml
                text/x-component
                text/x-json
                font/opentype
                application/x-font-ttf
                application/javascript
                application/x-javascript
                application/x-web-app-manifest+json
                application/json
                application/atom+xml
                application/xml
                application/xml+rss
                application/xhtml+xml
                application/vnd.ms-fontobject
                image/svg+xml
                image/x-icon;

  brotli                    on;
  brotli_static             on;
  brotli_comp_level         6;
  brotli_buffers            16 8k;
  brotli_min_length         20;
  brotli_window             16m;
  brotli_types              *;

  access_log off;
  error_log off;

  include /etc/nginx/conf.d/*.conf;
}
EOF

rm -rf /etc/nginx/conf.d/default.conf
cat << EOF > /etc/nginx/conf.d/default.conf
server {
  listen       80;
  server_name  localhost;
  root         /var/www/html;
  index        index.php index.html index.htm;

location ~* \.php$ {
  fastcgi_pass            unix:/run/php/php7.4-fpm.sock;
  fastcgi_index           index.php;
  fastcgi_split_path_info ^(.+\.php)(.*)$;
  include                 fastcgi_params;
  fastcgi_param           SCRIPT_FILENAME \$document_root\$fastcgi_script_name;
}

}
EOF

docker stop nginx > /dev/null 2>&1
docker rm nginx > /dev/null 2>&1

docker rmi jacyl4/nginx_tls1.3:latest > /dev/null 2>&1
docker pull jacyl4/nginx_tls1.3:latest

docker run -d --name=nginx --net=host --restart=always \
-v /etc/localtime:/etc/localtime \
-v /etc/nginx/nginx.conf:/etc/nginx/nginx.conf \
-v /etc/nginx/conf.d/default.conf:/etc/nginx/conf.d/default.conf \
-v /var/www/html/:/var/www/html/ \
-v /run/php/:/run/php/ \
jacyl4/nginx_tls1.3:latest
}



installWebUI(){
cd ~
svn export https://github.com/jacyl4/de_GWD/trunk/resource/ui-script
svn export https://github.com/jacyl4/de_GWD/trunk/resource/ui-web

rsync -azrI ~/ui-script/* /usr/local/bin
rsync -azrI ~/ui-web/* /var/www/html
rm -rf ~/ui-*

wget https://raw.githubusercontent.com/jacyl4/de_GWD/master/version.php
mv -f ~/version.php /var/www/html/version.php

mkdir -p /var/www/html/restore
chown -R www-data:www-data /var/www/html
chmod -R 755 /var/www/html
chmod +x /usr/local/bin/*
}



postInstall(){
cat << "EOF" > /usr/local/bin/Q4am
#!/bin/bash
cd ~
wget -c https://raw.githubusercontent.com/jacyl4/de_GWD/master/resource/dlc.dat
wget -c https://raw.githubusercontent.com/ToutyRater/V2Ray-SiteDAT/master/geofiles/h2y.dat                
curl -L 'http://ftp.apnic.net/apnic/stats/apnic/delegated-apnic-latest' | grep ipv4 | grep CN | awk -F\| '{ printf("%s/%d\n", $4, 32-log($5)/log(2)) }' > ~/chnroute.txt
mv -f ~/dlc.dat /usr/bin/vtrui/geosite.dat
mv -f ~/h2y.dat /usr/bin/vtrui/h2y.dat
mv -f ~/chnroute.txt /usr/local/bin/chnroute.txt

{
echo "create chnroute hash:net family inet hashsize 2048 maxelem 65535"
chnroute=`cat /usr/local/bin/chnroute.txt`
for chnroute in $chnroute ; do
 echo "add chnroute $chnroute"
done
} > /usr/local/bin/chnrouteset

ipset -F chnroute
for ipchnroute in $(cat /usr/local/bin/chnroute.txt); do
  ipset add chnroute $ipchnroute
done
EOF
chmod +x /usr/local/bin/Q4am
/usr/local/bin/Q4am

cat << "EOF" > /usr/local/bin/Q4H
#!/bin/bash
date -s "$(wget -qSO- --max-redirect=0 google.com 2>&1 | grep Date: | cut -d' ' -f5-8)Z"
hwclock -w

rm -rf ~/client*
rm -rf /var/log/*1*
rm -rf /var/log/*2*
rm -rf /var/log/*.gz
rm -rf /tmp/nodecheck*
rm -rf /var/www/html/log.log

/usr/local/bin/ui-listBWresolve > /dev/null 2>&1
EOF
chmod +x /usr/local/bin/Q4H
/usr/local/bin/Q4H

crontab -l > ~/now.cron
sed -i '/\/usr\/local\/bin\/Q4am/d' ~/now.cron
sed -i '/\/usr\/local\/bin\/Q4H/d' ~/now.cron
cat << EOF >> ~/now.cron
0 4 * * * /usr/local/bin/Q4am
0 */4 * * * /usr/local/bin/Q4H
EOF
crontab ~/now.cron
rm -rf ~/now.cron

apt update && apt upgrade -y && apt autoremove -y

if [[ ! -f "wg0.conf" ]]; then
mkdir -p /etc/wireguard
/usr/local/bin/ui-WGchangeKey >/dev/null 2>&1
fi

/usr/local/bin/ui-NodeDThide >/dev/null 2>&1
/usr/local/bin/ui-nodeResolve >/dev/null 2>&1
/usr/local/bin/ui-changeDOH >/dev/null 2>&1

sed -i "/$doh/d" /etc/hosts
}



installGWD(){
    green "========================="
    green " de_GWD local IP address"
    green "========================="
    read localaddr

    green "========================="
    green " Upstream route IP address"
    green "========================="
    read gatewayaddr

    green "========================="
    green " V2ray domain"
    green "========================="
    read v2servn

    green "========================="
    green " V2ray UUID"
    green "========================="
    read uuidnum

    green "========================="
    green " Path"
    green "========================="
    read v2path

cd ~

domain=$(echo $v2servn | cut -d : -f1)
port=$(echo $v2servn | cut -d : -f2)
ethernetnum=$(ip --oneline link show up | grep -v "lo" | awk '{print$2;exit}' | cut -d':' -f1 | cut -d'@' -f1)

piholePW="0000000000000000000000000000000000000000000000000000000000000000"

cat << EOF > /etc/network/interfaces
source /etc/network/interfaces.d/*

auto lo
iface lo inet loopback

auto $ethernetnum
iface $ethernetnum inet static
  address $localaddr
  netmask 255.255.255.0
  gateway $gatewayaddr
EOF

preInstall

installDOH

installV2ray

echo "create chnroute hash:net family inet hashsize 2048 maxelem 65535" > /usr/local/bin/chnrouteset

installIptablesProxy

installWGdoPHP

installPihole

sed -i "/static ip_address=/d" /etc/dhcpcd.conf
sed -i "/static routers=/d" /etc/dhcpcd.conf
sed -i "/static domain_name_servers=/d" /etc/dhcpcd.conf

echo -e "static ip_address=$localaddr/32" >> /etc/dhcpcd.conf
echo -e "static routers=$gatewayaddr" >> /etc/dhcpcd.conf
echo -e "static domain_name_servers=127.0.0.1" >> /etc/dhcpcd.conf

installNginx

echo "{}" > /usr/local/bin/0conf
jq '.address={}' /usr/local/bin/0conf |\
jq --arg localIP "$localaddr" '.address.localIP=$localIP' |\
jq --arg upstreamIP "$gatewayaddr" '.address.upstreamIP=$upstreamIP' |\
jq '.doh={}' |\
jq --arg doh1 "$v2servn" '.doh.doh1=$doh1' |\
jq --arg doh2 "$v2servn" '.doh.doh2=$doh2' |\
jq '.v2node=[]' |\
jq --arg domain "$v2servn" '.v2node[0].domain=$domain' |\
jq --arg name "$v2servn" '.v2node[0].name=$name' |\
jq --arg uuid "$uuidnum" '.v2node[0].uuid=$uuid' |\
jq --arg path "$v2path" '.v2node[0].path=$path' > /tmp/0conf_temp && mv -f /tmp/0conf_temp /usr/local/bin/0conf
chmod -R 666 /usr/local/bin/0conf

installWebUI

postInstall

blue "---------------------"
blue "Install de_GWD [done]"
blue "---------------------"
}



change_piholeAdmin(){
pihole -a -p

piholePW=$(awk '/WEBPASSWORD/' /etc/pihole/setupVars.conf | cut -d = -f2)

jq --arg piholePW "$piholePW" '.pihole = $piholePW' /usr/local/bin/0conf > /tmp/0conf_temp && mv -f /tmp/0conf_temp /usr/local/bin/0conf
chmod -R 666 /usr/local/bin/0conf

blue "------------------------------"
blue "Change Pi-hole password [done]"
blue "------------------------------"
}



updateGWD(){
if [[ -f "/var/www/html/domain.txt" ]]||[[ -f "/var/www/html/nodename.txt" ]]||[[ -f "/var/www/html/uuid.txt" ]]||[[ -f "/var/www/html/path.txt" ]]; then

ethernetnum=$(ip --oneline link show up | grep -v "lo" | awk '{print$2;exit}' | cut -d':' -f1 | cut -d'@' -f1)
localaddr=$(ip a | grep "$ethernetnum" | awk '{print $2}' | awk 'END {print}' | cut -d'/' -f1)
gatewayaddr=$(ip route show | awk '/'$ethernetnum'/ {print$3;exit}')

dhcpStart=$(awk NR==1 /var/www/html/dhcp.txt)
dhcpEnd=$(awk NR==2 /var/www/html/dhcp.txt)

piholePW=$(awk '/WEBPASSWORD/' /etc/pihole/setupVars.conf | cut -d = -f2)
alias=$(awk NR==1 /var/www/html/markThis.txt)

doh1=$(awk NR==1 /var/www/html/doh.txt)
doh2=$(awk NR==2 /var/www/html/doh.txt)

domain1=$(awk NR==1 /var/www/html/domain.txt)
domain2=$(awk NR==2 /var/www/html/domain.txt)
domain3=$(awk NR==3 /var/www/html/domain.txt)
domain4=$(awk NR==4 /var/www/html/domain.txt)
domain5=$(awk NR==5 /var/www/html/domain.txt)
domain6=$(awk NR==6 /var/www/html/domain.txt)
domain7=$(awk NR==7 /var/www/html/domain.txt)
domain8=$(awk NR==8 /var/www/html/domain.txt)
domain9=$(awk NR==9 /var/www/html/domain.txt)

name1=$(awk NR==1 /var/www/html/nodename.txt)
name2=$(awk NR==2 /var/www/html/nodename.txt)
name3=$(awk NR==3 /var/www/html/nodename.txt)
name4=$(awk NR==4 /var/www/html/nodename.txt)
name5=$(awk NR==5 /var/www/html/nodename.txt)
name6=$(awk NR==6 /var/www/html/nodename.txt)
name7=$(awk NR==7 /var/www/html/nodename.txt)
name8=$(awk NR==8 /var/www/html/nodename.txt)
name9=$(awk NR==9 /var/www/html/nodename.txt)

uuid1=$(awk NR==1 /var/www/html/uuid.txt)
uuid2=$(awk NR==2 /var/www/html/uuid.txt)
uuid3=$(awk NR==3 /var/www/html/uuid.txt)
uuid4=$(awk NR==4 /var/www/html/uuid.txt)
uuid5=$(awk NR==5 /var/www/html/uuid.txt)
uuid6=$(awk NR==6 /var/www/html/uuid.txt)
uuid7=$(awk NR==7 /var/www/html/uuid.txt)
uuid8=$(awk NR==8 /var/www/html/uuid.txt)
uuid9=$(awk NR==9 /var/www/html/uuid.txt)

path1=$(awk NR==1 /var/www/html/path.txt)
path2=$(awk NR==2 /var/www/html/path.txt)
path3=$(awk NR==3 /var/www/html/path.txt)
path4=$(awk NR==4 /var/www/html/path.txt)
path5=$(awk NR==5 /var/www/html/path.txt)
path6=$(awk NR==6 /var/www/html/path.txt)
path7=$(awk NR==7 /var/www/html/path.txt)
path8=$(awk NR==8 /var/www/html/path.txt)
path9=$(awk NR==9 /var/www/html/path.txt)

cfDomain=$(awk NR==1 /var/www/html/ddnsCF.txt)
cfZoneID=$(awk NR==2 /var/www/html/ddnsCF.txt)
cfAPIkey=$(awk NR==3 /var/www/html/ddnsCF.txt)
cfEmail=$(awk NR==4 /var/www/html/ddnsCF.txt)
cfDomainID=$(awk NR==5 /var/www/html/ddnsCF.txt)

WGdomain=$(awk NR==1 /var/www/html/WGaddress.txt)
WGport=$(awk NR==2 /var/www/html/WGaddress.txt)
WGmark1=$(awk NR==1 /var/www/html/WGmark.txt)
WGmark2=$(awk NR==2 /var/www/html/WGmark.txt)
WGmark3=$(awk NR==3 /var/www/html/WGmark.txt)
WGmark4=$(awk NR==4 /var/www/html/WGmark.txt)
WGmark5=$(awk NR==5 /var/www/html/WGmark.txt)
WGmark6=$(awk NR==6 /var/www/html/WGmark.txt)
WGmark7=$(awk NR==7 /var/www/html/WGmark.txt)
WGmark8=$(awk NR==8 /var/www/html/WGmark.txt)

sprivatekey=$(cat /etc/wireguard/sprivatekey)
spublickey=$(cat /etc/wireguard/spublickey)
cprivatekey1=$(cat /etc/wireguard/cprivatekey1)
cprivatekey2=$(cat /etc/wireguard/cprivatekey2)
cprivatekey3=$(cat /etc/wireguard/cprivatekey3)
cprivatekey4=$(cat /etc/wireguard/cprivatekey4)
cprivatekey5=$(cat /etc/wireguard/cprivatekey5)
cprivatekey6=$(cat /etc/wireguard/cprivatekey6)
cprivatekey7=$(cat /etc/wireguard/cprivatekey7)
cprivatekey8=$(cat /etc/wireguard/cprivatekey8)
cpublickey1=$(cat /etc/wireguard/cpublickey1)
cpublickey2=$(cat /etc/wireguard/cpublickey2)
cpublickey3=$(cat /etc/wireguard/cpublickey3)
cpublickey4=$(cat /etc/wireguard/cpublickey4)
cpublickey5=$(cat /etc/wireguard/cpublickey5)
cpublickey6=$(cat /etc/wireguard/cpublickey6)
cpublickey7=$(cat /etc/wireguard/cpublickey7)
cpublickey8=$(cat /etc/wireguard/cpublickey8)

echo "{}" > /usr/local/bin/0conf
jq '.address={}' /usr/local/bin/0conf |\
jq --arg localIP "$localaddr" '.address.localIP=$localIP' |\
jq --arg upstreamIP "$gatewayaddr" '.address.upstreamIP=$upstreamIP' |\
jq --arg dhcpStart "$dhcpStart" '.address.dhcpStart=$dhcpStart' |\
jq --arg dhcpEnd "$dhcpEnd" '.address.dhcpEnd = $dhcpEnd' |\
jq --arg alias "$alias" '.address.alias = $alias' |\
jq --arg piholePW "$piholePW" '.pihole = $piholePW' |\
jq '.doh={}' |\
jq --arg doh1 "$doh1" '.doh.doh1=$doh1' |\
jq --arg doh2 "$doh2" '.doh.doh2=$doh2' |\
jq '.v2node=[]' |\
jq --arg domain "$domain1" '.v2node[0].domain=$domain' |\
jq --arg name "$name1" '.v2node[0].name=$name' |\
jq --arg uuid "$uuid1" '.v2node[0].uuid=$uuid' |\
jq --arg path "$path1" '.v2node[0].path=$path' |\
jq --arg domain "$domain2" '.v2node[1].domain=$domain' |\
jq --arg name "$name2" '.v2node[1].name=$name' |\
jq --arg uuid "$uuid2" '.v2node[1].uuid=$uuid' |\
jq --arg path "$path2" '.v2node[1].path=$path' |\
jq --arg domain "$domain3" '.v2node[2].domain=$domain' |\
jq --arg name "$name3" '.v2node[2].name=$name' |\
jq --arg uuid "$uuid3" '.v2node[2].uuid=$uuid' |\
jq --arg path "$path3" '.v2node[2].path=$path' |\
jq --arg domain "$domain4" '.v2node[3].domain=$domain' |\
jq --arg name "$name4" '.v2node[3].name=$name' |\
jq --arg uuid "$uuid4" '.v2node[3].uuid=$uuid' |\
jq --arg path "$path4" '.v2node[3].path=$path' |\
jq --arg domain "$domain5" '.v2node[4].domain=$domain' |\
jq --arg name "$name5" '.v2node[4].name=$name' |\
jq --arg uuid "$uuid5" '.v2node[4].uuid=$uuid' |\
jq --arg path "$path5" '.v2node[4].path=$path' |\
jq --arg domain "$domain6" '.v2node[5].domain=$domain' |\
jq --arg name "$name6" '.v2node[5].name=$name' |\
jq --arg uuid "$uuid6" '.v2node[5].uuid=$uuid' |\
jq --arg path "$path6" '.v2node[5].path=$path' |\
jq --arg domain "$domain7" '.v2node[6].domain=$domain' |\
jq --arg name "$name7" '.v2node[6].name=$name' |\
jq --arg uuid "$uuid7" '.v2node[6].uuid=$uuid' |\
jq --arg path "$path7" '.v2node[6].path=$path' |\
jq --arg domain "$domain8" '.v2node[7].domain=$domain' |\
jq --arg name "$name8" '.v2node[7].name=$name' |\
jq --arg uuid "$uuid8" '.v2node[7].uuid=$uuid' |\
jq --arg path "$path8" '.v2node[7].path=$path' |\
jq --arg domain "$domain9" '.v2node[8].domain=$domain' |\
jq --arg name "$name9" '.v2node[8].name=$name' |\
jq --arg uuid "$uuid9" '.v2node[8].uuid=$uuid' |\
jq --arg path "$path9" '.v2node[8].path=$path' |\
jq '.ddns={}' |\
jq --arg cfDomain "$cfDomain" '.ddns.ddnsCF.cfDomain=$cfDomain' |\
jq --arg cfZoneID "$cfZoneID" '.ddns.ddnsCF.cfZoneID=$cfZoneID' |\
jq --arg cfAPIkey "$cfAPIkey" '.ddns.ddnsCF.cfAPIkey=$cfAPIkey' |\
jq --arg cfEmail "$cfEmail" '.ddns.ddnsCF.cfEmail=$cfEmail' |\
jq --arg cfDomainID "$cfDomainID" '.ddns.ddnsCF.cfDomainID=$cfDomainID' |\
jq '.wireguard={}' |\
jq --arg WGdomain "$WGdomain" '.wireguard.WGdomain=$WGdomain' |\
jq --arg WGport "$WGport" '.wireguard.WGport=$WGport' |\
jq --arg WGmark1 "$WGmark1" '.wireguard.WGmark[0]=$WGmark1' |\
jq --arg WGmark2 "$WGmark2" '.wireguard.WGmark[1]=$WGmark2' |\
jq --arg WGmark3 "$WGmark3" '.wireguard.WGmark[2]=$WGmark3' |\
jq --arg WGmark4 "$WGmark4" '.wireguard.WGmark[3]=$WGmark4' |\
jq --arg WGmark5 "$WGmark5" '.wireguard.WGmark[4]=$WGmark5' |\
jq --arg WGmark6 "$WGmark6" '.wireguard.WGmark[5]=$WGmark6' |\
jq --arg WGmark7 "$WGmark7" '.wireguard.WGmark[6]=$WGmark7' |\
jq --arg WGmark8 "$WGmark8" '.wireguard.WGmark[7]=$WGmark8' |\
jq --arg sprivatekey "$sprivatekey" '.wireguard.sprivatekey=$sprivatekey' |\
jq --arg spublickey "$spublickey" '.wireguard.spublickey=$spublickey' |\
jq --arg cprivatekey1 "$cprivatekey1" '.wireguard.cprivatekey1=$cprivatekey1' |\
jq --arg cprivatekey2 "$cprivatekey2" '.wireguard.cprivatekey2=$cprivatekey2' |\
jq --arg cprivatekey3 "$cprivatekey3" '.wireguard.cprivatekey3=$cprivatekey3' |\
jq --arg cprivatekey4 "$cprivatekey4" '.wireguard.cprivatekey4=$cprivatekey4' |\
jq --arg cprivatekey5 "$cprivatekey5" '.wireguard.cprivatekey5=$cprivatekey5' |\
jq --arg cprivatekey6 "$cprivatekey6" '.wireguard.cprivatekey6=$cprivatekey6' |\
jq --arg cprivatekey7 "$cprivatekey7" '.wireguard.cprivatekey7=$cprivatekey7' |\
jq --arg cprivatekey8 "$cprivatekey8" '.wireguard.cprivatekey8=$cprivatekey8' |\
jq --arg cpublickey1 "$cpublickey1" '.wireguard.cpublickey1=$cpublickey1' |\
jq --arg cpublickey2 "$cpublickey2" '.wireguard.cpublickey2=$cpublickey2' |\
jq --arg cpublickey3 "$cpublickey3" '.wireguard.cpublickey3=$cpublickey3' |\
jq --arg cpublickey4 "$cpublickey4" '.wireguard.cpublickey4=$cpublickey4' |\
jq --arg cpublickey5 "$cpublickey5" '.wireguard.cpublickey5=$cpublickey5' |\
jq --arg cpublickey6 "$cpublickey6" '.wireguard.cpublickey6=$cpublickey6' |\
jq --arg cpublickey7 "$cpublickey7" '.wireguard.cpublickey7=$cpublickey7' |\
jq --arg cpublickey8 "$cpublickey8" '.wireguard.cpublickey8=$cpublickey8' > /tmp/0conf_temp && mv -f /tmp/0conf_temp /usr/local/bin/0conf

cat /var/www/html/hostsCustomize.txt | while read line 
do
  key=$(echo $line | awk '{print$1}')
  value=$(echo $line | awk '{print$2}')
jq --arg key $key --arg value $value '.hosts += {($key): ($value)}' /usr/local/bin/0conf > /tmp/0conf_temp && mv -f /tmp/0conf_temp /usr/local/bin/0conf
done
chmod -R 666 /usr/local/bin/0conf

rm /var/www/html/*.txt
fi

cd ~
source /etc/profile

checkDNS=$(/usr/local/bin/ui-checkDNS)
checkDHCP=$(/usr/local/bin/ui-checkDhcp)
checkDDNScf=$(/usr/local/bin/ui-checkDDNScf)
checkWG=$(/usr/local/bin/ui-checkWG)
checkV2ad=$(/usr/local/bin/ui-checkV2ad)

piholePW=$(jq -r '.pihole' /usr/local/bin/0conf)

domain=$(jq -r '.outbounds[0].settings.vnext[0].address' /etc/vtrui/config.json)
port=$(jq -r '.outbounds[0].settings.vnext[0].port' /etc/vtrui/config.json)
uuidnum=$(jq -r '.outbounds[0].settings.vnext[0].users[0].id' /etc/vtrui/config.json)
v2path=$(jq -r '.outbounds[0].streamSettings.wsSettings.path' /etc/vtrui/config.json)

ethernetnum=$(ip --oneline link show up | grep -v "lo" | awk '{print$2;exit}' | cut -d':' -f1 | cut -d'@' -f1)
localaddr=$(ip a | grep "$ethernetnum" | awk '{print $2}' | awk 'END {print}' | cut -d'/' -f1)

preInstall

installDOH

installV2ray

installIptablesProxy

installWGdoPHP

installPihole

installNginx

installWebUI

postInstall

if [[ $checkDNS = "GFWlist" ]]; then
/usr/local/bin/ui-changeNLgfw
else
/usr/local/bin/ui-changeNLchnw
fi

if [[ $checkDHCP = "on" ]]; then
/usr/local/bin/ui-dhcpUP
fi

if [[ $checkDDNScf = "on" ]]; then
/usr/local/bin/ui-ddnsUpdateOnCF
fi

if [[ $checkWG = "on" ]]; then
/usr/local/bin/ui-WGon
fi

if [[ $checkV2ad = "on" ]]; then
/usr/local/bin/ui-v2adADD
fi

if [[ -n $(jq -r '.address.alias' /usr/local/bin/0conf) ]]; then
/usr/local/bin/ui-markThis
fi

blue "--------------------"
blue "Update de_GWD [done]"
blue "--------------------"
}



start_menu(){
statusGOOD=$(green "✓")
statusBAD=$(red "✕")

if [[ $(systemctl is-active smartdns) = "active" ]]; then
    echo "[$statusGOOD] SmartDNS       [working]"
elif [[ ! -f "/etc/smartdns/smartdns.conf" ]]; then
    echo "[$statusBAD] SmartDNS       [not Installed]"
else
    echo "[$statusBAD] SmartDNS       [start failed]"
fi

if [[ $(systemctl is-active doh-client) = "active" ]]; then
    echo "[$statusGOOD] DoH client     [working]"
elif [[ ! -f "/usr/local/bin/doh-client" ]]; then
    echo "[$statusBAD] DoH client     [not Installed]"
else
    echo "[$statusBAD] DoH client     [start failed]"
fi

if [[ $(systemctl is-active pihole-FTL) = "active" ]]; then
    echo "[$statusGOOD] Pi-hole        [working]"
elif [ ! -f "/usr/local/bin/pihole" ]; then
    echo "[$statusBAD] Pi-hole        [not installed]"
else
    echo "[$statusBAD] Pi-hole        [start failed]"
fi

if [[ $(systemctl is-active vtrui) = "active" ]]; then
    echo "[$statusGOOD] V2RAY          [working]"
elif [[ ! -d "/usr/bin/vtrui" ]]; then
    echo "[$statusBAD] V2RAY          [not Installed]"
else
    echo "[$statusBAD] V2RAY          [start failed]"
fi


if [[ $(systemctl is-active php7.4-fpm) = "active" ]]; then
    echo "[$statusGOOD] php7.4-FPM     [working]"
elif [ ! -f "/etc/php/7.4/fpm/php-fpm.conf" ]; then
    echo "[$statusBAD] php7.4-FPM     [not installed]"
else
    echo "[$statusBAD] php7.4-FPM     [start failed]"
fi


if [[ $(systemctl is-active docker) = "active" ]]; then
    echo "[$statusGOOD] Docker         [working]"
elif [[ ! -f "/usr/bin/docker" ]]; then
    echo "[$statusBAD] Docker         [not installed]"
else
    echo "[$statusBAD] Docker         [start failed]"
fi

blue "-----------------------------"
blue "当前bbr方案：$(echo $(sysctl net.ipv4.tcp_congestion_control) | cut -d ' ' -f3)"
blue "-----------------------------"

    green "==============================="
    green "           CLIENT ( Docker )"
    green "Recommend: Debian 10 ( amd64 )"
    green "Author:    JacyL4"
    green "==============================="
    echo
    green  "1. Install de_GWD"
    yellow "2. Change de_GWD password"
    yellow "0. Update de_GWD"
    red    "CTRL+C EXIT"
    echo
    read -p "Select:" num
    case "$num" in
    1)
    installGWD
    start_menu
    ;;
    2)
    change_piholeAdmin
    start_menu
    ;;
    0)
    updateGWD
    start_menu
    ;;
    *)
    clear
    red "Wrong number"
    sleep 1s
    start_menu
    ;;
    esac
}

start_menu