#!/bin/bash
clear
blue()   { echo -e "\033[34m\033[01m $1 \033[0m"; }
yellow() { echo -e "\033[33m\033[01m $1 \033[0m"; }
green()  { echo -e "\033[32m\033[01m $1 \033[0m"; }
red()    { echo -e "\033[31m\033[01m $1 \033[0m"; }



preInstall(){
checkSWAP=`swapon --show`
if [[ -z "$checkSWAP" ]]; then
install -o root -g root -m 0600 /dev/null /swapfile
dd if=/dev/zero of=/swapfile bs=1k count=512k
mkswap /swapfile
swapon /swapfile
sed -i "/swapfile/d" /etc/fstab
echo "/swapfile swap swap defaults 0 0" > /etc/fstab
fi

rm -rf /etc/resolv.conf
cat << EOF > /etc/resolv.conf
nameserver 1.1.1.1
nameserver 8.8.8.8
nameserver 1.0.0.1
nameserver 8.8.4.4
EOF

cat << EOF > /etc/security/limits.conf
* soft nofile 1000000
* hard nofile 1000000
* soft nproc 1000000
* hard nproc 1000000
EOF
echo "ulimit -n 1000000" > ~/.bash_profile

cat << EOF > /etc/sysctl.conf
vm.overcommit_memory = 1
vm.swappiness = 10
fs.file-max = 1000000
fs.inotify.max_user_instances = 1000000
fs.inotify.max_user_watches = 1000000
net.ipv6.conf.all.disable_ipv6 = 1
net.ipv6.conf.default.disable_ipv6 = 1
net.ipv6.conf.lo.disable_ipv6 = 1
net.ipv4.ip_local_port_range = 1025 65535
net.ipv4.tcp_window_scaling = 1
net.ipv4.tcp_timestamps = 1
net.ipv4.tcp_tw_reuse =1
net.ipv4.tcp_sack = 1
net.ipv4.tcp_fack = 1
net.ipv4.tcp_fastopen = 3
net.ipv4.tcp_syncookies = 1
net.ipv4.tcp_fin_timeout = 30
net.ipv4.tcp_syn_retries = 1
net.ipv4.tcp_synack_retries = 1
net.ipv4.tcp_max_syn_backlog = 32768
net.ipv4.tcp_max_tw_buckets = 6000
net.ipv4.tcp_max_orphans = 32768
net.ipv4.tcp_rmem = 4096 87380 8388608
net.ipv4.tcp_wmem = 4096 87380 8388608
net.core.rmem_max = 8388608
net.core.wmem_max = 8388608
net.core.somaxconn = 32768
net.core.netdev_max_backlog = 32768
EOF

if [[ "$(uname -r)" =~ "bbrplus" ]]; then
sed -i "/net.core.default_qdisc/d" /etc/sysctl.conf
sed -i '/net.ipv4.tcp_congestion_control/d' /etc/sysctl.conf
echo "net.core.default_qdisc = fq" >> /etc/sysctl.conf
echo "net.ipv4.tcp_congestion_control = bbrplus" >> /etc/sysctl.conf

else
sed -i "/net.core.default_qdisc/d" /etc/sysctl.conf
sed -i '/net.ipv4.tcp_congestion_control/d' /etc/sysctl.conf
echo "net.core.default_qdisc = fq" >> /etc/sysctl.conf
echo "net.ipv4.tcp_congestion_control = bbr" >> /etc/sysctl.conf
fi

sysctl -p

sed -i '/ip6-/d' /etc/hosts

systemctl mask --now systemd-resolved > /dev/null 2>&1
systemctl daemon-reload > /dev/null 2>&1
rm -rf /run/resolvconf/interface/systemd-resolved

echo "Asia/Shanghai" > /etc/timezone
ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime

date -s "$(wget -qSO- --max-redirect=0 google.com 2>&1 | grep Date: | cut -d' ' -f5-8)Z"
hwclock -w

cat << EOF > /etc/apt/apt.conf.d/01InstallLess
APT::Install-Recommends "false";
APT::Install-Suggests "false";
EOF
}



installIptablesRules(){
cat << EOF > /usr/local/bin/iptablesrules-up
#!/bin/bash
iptables -A INPUT -p udp --dport 53 -s 127.0.0.1,172.17.0.0/24,172.16.66.0/24 -j ACCEPT
iptables -A INPUT -p tcp --dport 53 -s 127.0.0.1,172.17.0.0/24,172.16.66.0/24 -j ACCEPT

iptables -A INPUT -p udp --dport 53 -i $ethernetnum -j DROP
iptables -A INPUT -p tcp --dport 53 -i $ethernetnum -j DROP
EOF
chmod +x /usr/local/bin/iptablesrules-up

cat << EOF > /usr/local/bin/iptablesrules-down
#!/bin/bash
iptables -F
iptables -X
EOF
chmod +x /usr/local/bin/iptablesrules-down

cat << EOF > /lib/systemd/system/iptablesrules.service
[Unit]
Description=iptablesrules
After=network.target
Wants=network.target

[Service]
Type=oneshot
ExecStart=/usr/local/bin/iptablesrules-up
ExecStop=/usr/local/bin/iptablesrules-down
RemainAfterExit=yes

[Install]
WantedBy=multi-user.target
EOF

systemctl daemon-reload
systemctl enable iptablesrules
systemctl restart iptablesrules
}



installPihole(){
mkdir -p /etc/pihole
echo "" > /etc/pihole/adlists.list
cat << EOF > /etc/pihole/setupVars.conf
PIHOLE_INTERFACE=$ethernetnum
IPV4_ADDRESS=$localaddr/24
PIHOLE_DNS_1=1.1.1.1
PIHOLE_DNS_2=8.8.8.8
QUERY_LOGGING=false
INSTALL_WEB_SERVER=false
INSTALL_WEB_INTERFACE=false
LIGHTTPD_ENABLED=false
BLOCKING_ENABLED=true
WEBPASSWORD=0000000000000000000000000000000000000000000000000000000000000000
DNSMASQ_LISTENING=single
DNS_FQDN_REQUIRED=true
DNS_BOGUS_PRIV=true
DNSSEC=false
CONDITIONAL_FORWARDING=false
EOF

curl -sSL https://install.pi-hole.net | bash /dev/stdin --unattended

systemctl mask --now dhcpcd
systemctl mask --now lighttpd
systemctl daemon-reload

sed -i '/PIHOLE_DNS/d'  /etc/pihole/setupVars.conf
sed -i '/QUERY_LOGGING=/i\PIHOLE_DNS_1=1.1.1.1' /etc/pihole/setupVars.conf
sed -i '/QUERY_LOGGING=/i\PIHOLE_DNS_2=8.8.8.8' /etc/pihole/setupVars.conf
sed -i '/QUERY_LOGGING=/i\PIHOLE_DNS_3=1.0.0.1' /etc/pihole/setupVars.conf
sed -i '/QUERY_LOGGING=/i\PIHOLE_DNS_4=8.8.4.4' /etc/pihole/setupVars.conf
sed -i '/server=/d'  /etc/dnsmasq.d/01-pihole.conf
sed -i '/interface=/i\server=1.1.1.1' /etc/dnsmasq.d/01-pihole.conf
sed -i '/interface=/i\server=8.8.8.8' /etc/dnsmasq.d/01-pihole.conf
sed -i '/interface=/i\server=1.0.0.1' /etc/dnsmasq.d/01-pihole.conf
sed -i '/interface=/i\server=8.8.4.4' /etc/dnsmasq.d/01-pihole.conf

pihole -f
}



installDOHser(){
cd ~
wget -O ~/doh.zip https://raw.githubusercontent.com/jacyl4/de_GWD/master/resource/dohamd64.zip
unzip doh.zip
mv -f ~/doh/doh-server /usr/local/bin/doh-server
chmod +x /usr/local/bin/doh-server
rm -rf ~/doh*

mkdir -p /etc/dns-over-https
cat << EOF > /etc/dns-over-https/doh-server.conf
listen = [ "127.0.0.1:8053" ]
path = "/dq"

upstream = [ "udp:127.0.0.1:53" ]

timeout = 10
tries = 3
verbose = false
log_guessed_client_ip = false
EOF

mkdir -p /etc/NetworkManager/dispatcher.d
cat << "EOF" > /etc/NetworkManager/dispatcher.d/doh-server
#!/bin/bash
case "$2" in
    up)
        /usr/bin/systemctl is-active doh-server.service > /dev/null && /usr/bin/systemctl restart doh-server.service
        ;;
    down)
        /usr/bin/systemctl is-active doh-server.service > /dev/null && /usr/bin/systemctl restart doh-server.service
        ;;
    *)
        exit 0
        ;;
esac
EOF
chmod +x /etc/NetworkManager/dispatcher.d/doh-server

echo "" > /run/doh-server.pid
cat << "EOF" > /lib/systemd/system/doh-server.service
[Unit]
Description=DNS-over-HTTPS server
After=network.target
Wants=network.target

[Service]
Type=simple
PIDFile=/run/doh-server.pid
AmbientCapabilities=CAP_NET_BIND_SERVICE
ExecStart=/usr/local/bin/doh-server -conf /etc/dns-over-https/doh-server.conf
Restart=always
RestartSec=5
LimitNPROC=1000000
LimitNOFILE=1000000

[Install]
WantedBy=multi-user.target
EOF
systemctl daemon-reload
systemctl enable doh-server
systemctl restart doh-server
}



installV2ray(){
cd ~
mkdir -p /usr/bin/vtrui
mkdir -p /etc/vtrui

wget -O ~/vtrui.zip https://raw.githubusercontent.com/jacyl4/de_GWD/master/resource/vtamd64.zip
unzip vtrui.zip
mv -f ~/vtrui/vtrui /usr/bin/vtrui/vtrui
mv -f ~/vtrui/v2ctl /usr/bin/vtrui/v2ctl
chmod +x /usr/bin/vtrui/vtrui
chmod +x /usr/bin/vtrui/v2ctl
rm -rf ~/vtrui*

cat << EOF > /etc/vtrui/config.json
{
  "dns": { "servers": [ "localhost" ] },
  "inbounds": [
    {
    "port": 11811,
    "listen": "127.0.0.1",
    "protocol": "vmess",
    "sniffing": {"enabled": true, "destOverride": ["http", "tls"]},
    "settings": {
      "clients": []
      },
    "streamSettings": {
      "network": "ws",
      "wsSettings": {
        "path": "/0000"
        }
      }
    }
  ],
  "outbounds": [
  {"protocol": "freedom", "settings": {"domainStrategy": "UseIPv4"}},
  {"tag": "block", "protocol": "blackhole", "settings": {}}
  ]
}
EOF


{
for v2uuids in $v2uuids; do
echo '{"id": "'$v2uuids'", "level": 1, "alterId": 64}'
done
} > /tmp/v2clients


cat /tmp/v2clients | while read v2clients
do
jq --argjson v2clients "$v2clients" '.inbounds[0].settings.clients+=[$v2clients]' /etc/vtrui/config.json > /etc/vtrui/temp.json && mv -f /etc/vtrui/temp.json /etc/vtrui/config.json
done
rm -rf /tmp/v2clients

jq --arg v2path "$v2path" '.inbounds[0].streamSettings.wsSettings.path=$v2path' /etc/vtrui/config.json > /etc/vtrui/temp.json && mv -f /etc/vtrui/temp.json /etc/vtrui/config.json

echo "" > /run/vtrui.pid
cat << EOF > /lib/systemd/system/vtrui.service
[Unit]
Description=vtrui Service
After=network.target
Wants=network.target

[Service]
Type=simple
PIDFile=/run/vtrui.pid
AmbientCapabilities=CAP_NET_BIND_SERVICE
ExecStart=/usr/bin/vtrui/vtrui -config /etc/vtrui/config.json
Restart=always
RestartSec=5
LimitNPROC=1000000
LimitNOFILE=1000000

[Install]
WantedBy=multi-user.target
EOF

systemctl daemon-reload
systemctl enable vtrui
systemctl restart vtrui
}



nginxConf(){
mkdir -p "/etc/nginx"
mkdir -p "/etc/nginx/conf.d"
mkdir -p "/var/log/nginx"
mkdir -p "/var/www/html"

rm -rf /etc/nginx/nginx.conf
cat << EOF > /etc/nginx/nginx.conf
user  www-data www-data;
pid   /run/nginx.pid;

worker_processes auto;
worker_rlimit_nofile 100000;

events {
    worker_connections  2048;
    multi_accept on;
    use epoll;
}

http {
  include mime.types;
  default_type application/octet-stream;

  fastcgi_connect_timeout 300;
  fastcgi_send_timeout 300;
  fastcgi_read_timeout 300;
  fastcgi_buffer_size 64k;
  fastcgi_buffers 4 64k;
  fastcgi_busy_buffers_size 128k;
  fastcgi_temp_file_write_size 128k;
  fastcgi_intercept_errors on;

  server_tokens             off;
  sendfile                  on;
  tcp_nodelay               on;
  tcp_nopush                on;
  keepalive_timeout         60;
  client_header_timeout     60;
  client_body_timeout       60;
  reset_timedout_connection on;
  send_timeout              60;
  types_hash_max_size       2048;

  gzip                      on;
  gzip_disable              "MSIE [1-6]\.";
  gzip_vary                 on;
  gzip_proxied              any;
  gzip_comp_level           4;
  gzip_min_length           256;
  gzip_buffers              16 8k;
  gzip_http_version         1.0;
  gzip_types    text/plain
                text/javascript
                text/css
                text/js
                text/xml
                text/x-component
                text/x-json
                font/opentype
                application/x-font-ttf
                application/javascript
                application/x-javascript
                application/x-web-app-manifest+json
                application/json
                application/atom+xml
                application/xml
                application/xml+rss
                application/xhtml+xml
                application/vnd.ms-fontobject
                image/svg+xml
                image/x-icon;

  brotli                    on;
  brotli_static             on;
  brotli_comp_level         6;
  brotli_buffers            16 8k;
  brotli_min_length         20;
  brotli_window             16m;
  brotli_types              *;

  access_log off;
  error_log off;

  include /etc/nginx/conf.d/*.conf;
}
EOF

rm -rf /etc/nginx/conf.d/default.conf
echo "" > /etc/nginx/conf.d/default.conf

docker stop nginx > /dev/null 2>&1
docker rm nginx > /dev/null 2>&1

docker rmi jacyl4/nginx_tls1.3:latest > /dev/null 2>&1
docker pull jacyl4/nginx_tls1.3:latest
}



launchNginx(){
docker stop nginx > /dev/null 2>&1
docker rm nginx > /dev/null 2>&1

mkdir -p /var/www/ssl

if [[ -d "/etc/php" ]]; then
mkdir -p /run/php
echo "" > /run/php/php7.4-fpm.sock
chown -R www-data:www-data /run/php

docker run -d --name=nginx --net=host --restart=always \
-v /etc/localtime:/etc/localtime \
-v /etc/nginx/nginx.conf:/etc/nginx/nginx.conf \
-v /etc/nginx/conf.d/default.conf:/etc/nginx/conf.d/default.conf \
-v /run/php/:/run/php/ \
-v /var/www/html/:/var/www/html/ \
-v /var/www/ssl/:/var/www/ssl/ \
jacyl4/nginx_tls1.3:latest
else
docker run -d --name=nginx --net=host --restart=always \
-v /etc/localtime:/etc/localtime \
-v /etc/nginx/nginx.conf:/etc/nginx/nginx.conf \
-v /etc/nginx/conf.d/default.conf:/etc/nginx/conf.d/default.conf \
-v /var/www/html/:/var/www/html/ \
-v /var/www/ssl/:/var/www/ssl/ \
jacyl4/nginx_tls1.3:latest
fi
}



makeSSL_W(){
rm -rf /etc/nginx/conf.d/default.conf
cat << EOF > /etc/nginx/conf.d/default.conf
server {
    listen      80;
    server_name $vpsdomain;
    root        /var/www/html;
    index       index.php index.html index.htm;
}
EOF
docker restart nginx > /dev/null 2>&1

curl https://get.acme.sh | sh
~/.acme.sh/acme.sh --upgrade  --auto-upgrade
~/.acme.sh/acme.sh --issue -d $vpsdomain -w /var/www/html --keylength ec-256
~/.acme.sh/acme.sh --installcert -d $vpsdomain --ecc \
               --key-file       /var/www/ssl/$vpsdomain.key  \
               --fullchain-file /var/www/ssl/fullchain.cer \
               --reloadcmd     "docker restart nginx > /dev/null 2>&1"
openssl dhparam -out /var/www/ssl/dhparam.pem 2048

cat << EOF > /var/www/ssl/update_ocsp_cache
#!/bin/bash
wget -O intermediate.pem https://letsencrypt.org/certs/lets-encrypt-x3-cross-signed.pem
wget -O root.pem https://ssl-tools.net/certificates/dac9024f54d8f6df94935fb1732638ca6ad77c13.pem
mv intermediate.pem /var/www/ssl
mv root.pem /var/www/ssl
cat /var/www/ssl/intermediate.pem > /var/www/ssl/bundle.pem
cat /var/www/ssl/root.pem >> /var/www/ssl/bundle.pem

openssl ocsp -no_nonce \
    -issuer  /var/www/ssl/intermediate.pem \
    -cert    /var/www/ssl/fullchain.cer \
    -CAfile  /var/www/ssl/bundle.pem \
    -VAfile  /var/www/ssl/bundle.pem \
    -url     http://ocsp.int-x3.letsencrypt.org \
    -respout /var/www/ssl/ocsp.resp
EOF
chmod +x /var/www/ssl/update_ocsp_cache
/var/www/ssl/update_ocsp_cache

crontab -l > ~/now.cron
sed -i '/\/var\/www\/ssl\/update_ocsp_cache/d' ~/now.cron
echo '0 0 * * 7 /var/www/ssl/update_ocsp_cache' >> ~/now.cron
crontab ~/now.cron
rm -rf ~/now.cron

docker restart nginx
}


nginxWebConf(){
cat << EOF > /etc/nginx/conf.d/default.conf
server {
  listen 80;
  server_name $vpsdomain;
  return 301 https://\$server_name\$request_uri;
}

server {
  listen 443 ssl http2 spdy fastopen=64 reuseport;
  server_name $vpsdomain;
  root /var/www/html;
  index index.php index.html index.htm;

  ssl_certificate /var/www/ssl/fullchain.cer;
  ssl_certificate_key /var/www/ssl/$vpsdomain.key;
  ssl_dhparam /var/www/ssl/dhparam.pem;
  ssl_protocols TLSv1.2 TLSv1.3;
  ssl_prefer_server_ciphers on;
  ssl_ciphers TLS13+AESGCM+AES128:TLS13+AESGCM+AES256:TLS13+CHACHA20:EECDH+ECDSA+AESGCM+AES128:EECDH+ECDSA+CHACHA20:EECDH+ECDSA+AESGCM+AES256:EECDH+ECDSA+AES128+SHA:EECDH+ECDSA+AES256+SHA:EECDH+aRSA+AESGCM+AES128:EECDH+aRSA+CHACHA20:EECDH+aRSA+AESGCM+AES256:EECDH+aRSA+AES128+SHA:EECDH+aRSA+AES256+SHA:RSA+AES128+SHA:RSA+AES256+SHA:RSA+3DES;
  ssl_session_timeout 10m;
  ssl_session_cache shared:le_nginx_SSL:10m;
  ssl_buffer_size 1400;

  ssl_early_data on;
  proxy_set_header Early-Data \$ssl_early_data;

  ssl_stapling on;
  ssl_stapling_verify on;
  ssl_stapling_file /var/www/ssl/ocsp.resp;
  resolver 1.1.1.1 valid=600s;
  resolver_timeout 5s;

  add_header X-Frame-Options DENY;
  add_header X-Content-Type-Options nosniff;
  add_header X-Robots-Tag none;
  add_header X-Download-Options noopen;
  add_header X-Permitted-Cross-Domain-Policies none;
  add_header X-XSS-Protection "1; mode=block";
  add_header Referrer-Policy no-referrer;
  add_header Strict-Transport-Security "max-age=63072000";

location /dq {
  proxy_set_header          Host \$host;
  proxy_set_header          X-Real-IP \$remote_addr;
  proxy_connect_timeout     60;
  proxy_send_timeout        60;
  proxy_read_timeout        60;
  proxy_redirect            off;
  proxy_pass                http://127.0.0.1:8053/dq;
}

location $v2path {
  proxy_http_version        1.1;
  proxy_set_header          Host \$http_host;
  proxy_set_header          Upgrade WebSocket;
  proxy_set_header          Connection "upgrade";
  proxy_set_header          X-Real-IP \$remote_addr;
  proxy_set_header          X-Forwarded-For \$proxy_add_x_forwarded_for;
  proxy_connect_timeout     60;
  proxy_send_timeout        60;
  proxy_read_timeout        60;
  proxy_redirect            off;
  proxy_buffering           on;
  proxy_buffer_size         8k;
  proxy_buffers             8 128k;
  proxy_busy_buffers_size   256k;
  proxy_max_temp_file_size  0;
  proxy_pass                http://127.0.0.1:11811;
}
}
EOF

docker restart nginx > /dev/null 2>&1
}


nginxNextcloudConf(){
cat << EOF > /etc/nginx/conf.d/default.conf
upstream php-handler {
    server unix:/run/php/php7.4-fpm.sock;
}

server {
  listen 80;
  server_name $vpsdomain;
  return 301 https://\$server_name\$request_uri;
}

server {
  listen 443 ssl http2 spdy fastopen=64 reuseport;
  server_name $vpsdomain;
  root /var/www/html;
  index index.php index.html index.htm;

  ssl_certificate /var/www/ssl/fullchain.cer;
  ssl_certificate_key /var/www/ssl/$vpsdomain.key;
  ssl_dhparam /var/www/ssl/dhparam.pem;
  ssl_protocols TLSv1.2 TLSv1.3;
  ssl_prefer_server_ciphers on;
  ssl_ciphers TLS13+AESGCM+AES128:TLS13+AESGCM+AES256:TLS13+CHACHA20:EECDH+ECDSA+AESGCM+AES128:EECDH+ECDSA+CHACHA20:EECDH+ECDSA+AESGCM+AES256:EECDH+ECDSA+AES128+SHA:EECDH+ECDSA+AES256+SHA:EECDH+aRSA+AESGCM+AES128:EECDH+aRSA+CHACHA20:EECDH+aRSA+AESGCM+AES256:EECDH+aRSA+AES128+SHA:EECDH+aRSA+AES256+SHA:RSA+AES128+SHA:RSA+AES256+SHA:RSA+3DES;
  ssl_session_timeout 10m;
  ssl_session_cache shared:le_nginx_SSL:10m;
  ssl_buffer_size 1400;

  ssl_early_data on;
  proxy_set_header Early-Data \$ssl_early_data;

  ssl_stapling on;
  ssl_stapling_verify on;
  ssl_stapling_file /var/www/ssl/ocsp.resp;
  resolver 8.8.8.8 valid=600s;
  resolver_timeout 5s;

  add_header X-Frame-Options SAMEORIGIN;
  add_header X-Content-Type-Options nosniff;
  add_header X-Robots-Tag none;
  add_header X-Download-Options noopen;
  add_header X-Permitted-Cross-Domain-Policies none;
  add_header X-XSS-Protection "1; mode=block";
  add_header Referrer-Policy no-referrer;
  add_header Strict-Transport-Security "max-age=63072000; includeSubDomains" always;

  location ~ [^/]\.php(/|$) {
    include fastcgi_params;
    fastcgi_param SCRIPT_FILENAME \$document_root\$fastcgi_script_name;
    fastcgi_pass unix:/run/php/php7.4-fpm.sock;
    fastcgi_index index.php;
  }

    fastcgi_hide_header X-Powered-By;

    location = /robots.txt {
        allow all;
        log_not_found off;
        access_log off;
    }

    location = /.well-known/carddav {
      return 301 \$scheme://\$host/nextcloud/remote.php/dav;
    }
    location = /.well-known/caldav {
      return 301 \$scheme://\$host/nextcloud/remote.php/dav;
    }

    location /.well-known/acme-challenge { }

    location ^~ /nextcloud {

    # set max upload size
    client_max_body_size 10G;
    fastcgi_buffers 64 4K;

        # Uncomment if your server is build with the ngx_pagespeed module
        # This module is currently not supported.
        #pagespeed off;

        location /nextcloud {
            rewrite ^ /nextcloud/index.php\$request_uri;
        }

        location ~ ^\/nextcloud\/(?:build|tests|config|lib|3rdparty|templates|data)\/ {
            deny all;
        }
        location ~ ^\/nextcloud\/(?:\.|autotest|occ|issue|indie|db_|console) {
            deny all;
        }

        location ~ ^\/nextcloud\/(?:index|remote|public|cron|core\/ajax\/update|status|ocs\/v[12]|updater\/.+|oc[ms]-provider\/.+)\.php(?:$|\/) {
            fastcgi_split_path_info ^(.+?\.php)(\/.*|)$;
            include fastcgi_params;
            fastcgi_param SCRIPT_FILENAME \$document_root\$fastcgi_script_name;
            fastcgi_param PATH_INFO \$fastcgi_path_info;
            fastcgi_param HTTPS on;
            #Avoid sending the security headers twice
            fastcgi_param modHeadersAvailable true;
            fastcgi_param front_controller_active true;
            fastcgi_pass php-handler;
            fastcgi_intercept_errors on;
            fastcgi_request_buffering off;
        }

        location ~ ^\/nextcloud\/(?:updater|oc[ms]-provider)(?:$|\/) {
            try_files \$uri/ =404;
            index index.php;
        }

        # Adding the cache control header for js and css files
        # Make sure it is BELOW the PHP block
        location ~ ^\/nextcloud\/.+[^\/]\.(?:css|js|woff2?|svg|gif)$ {
            try_files \$uri /nextcloud/index.php\$request_uri;
            add_header Cache-Control "public, max-age=15778463";
            # Add headers to serve security related headers  (It is intended
            # to have those duplicated to the ones above)
            # Before enabling Strict-Transport-Security headers please read
            # into this topic first.
            # add_header Strict-Transport-Security "max-age=15768000; includeSubDomains; preload;";
            add_header X-Frame-Options SAMEORIGIN;
            add_header X-Content-Type-Options nosniff;
            add_header X-XSS-Protection "1; mode=block";
            add_header X-Robots-Tag none;
            add_header X-Download-Options noopen;
            add_header X-Permitted-Cross-Domain-Policies none;
            add_header Referrer-Policy no-referrer;

            # Optional: Don't log access to assets
            access_log off;
        }

        location ~ ^\/nextcloud\/.+[^\/]\.(?:png|html|ttf|ico|jpg|jpeg)$ {
            try_files \$uri /nextcloud/index.php\$request_uri;
            # Optional: Don't log access to other assets
            access_log off;
        }
    }

location /dq {
  proxy_set_header          Host \$host;
  proxy_set_header          X-Real-IP \$remote_addr;
  proxy_connect_timeout     60;
  proxy_send_timeout        60;
  proxy_read_timeout        60;
  proxy_redirect            off;
  proxy_pass                http://127.0.0.1:8053/dq;
}

location $v2path {
  proxy_http_version        1.1;
  proxy_set_header          Host \$http_host;
  proxy_set_header          Upgrade WebSocket;
  proxy_set_header          Connection "upgrade";
  proxy_set_header          X-Real-IP \$remote_addr;
  proxy_set_header          X-Forwarded-For \$proxy_add_x_forwarded_for;
  proxy_connect_timeout     60;
  proxy_send_timeout        60;
  proxy_read_timeout        60;
  proxy_redirect            off;
  proxy_buffering           on;
  proxy_buffer_size         8k;
  proxy_buffers             8 128k;
  proxy_busy_buffers_size   256k;
  proxy_max_temp_file_size  0;
  proxy_pass                http://127.0.0.1:11811;
}
}
EOF

docker restart nginx > /dev/null 2>&1
}



postInstall(){
cat << "EOF" > /usr/local/bin/autoUpdate
#!/bin/bash
wget -O ~/update https://raw.githubusercontent.com/jacyl4/de_GWD/master/server
sed -i '$d' ~/update
echo "updateGWD" >>  ~/update
chmod +x ~/update
~/update

crontab -l > ~/now.cron
sed -i '/autoUpdate/d' ~/now.cron
crontab ~/now.cron
rm -rf ~/now.cron
rm -rf ~/update
EOF
chmod +x /usr/local/bin/autoUpdate

cat << "EOF" > /usr/local/bin/Q2H
#!/bin/bash
date -s "$(wget -qSO- --max-redirect=0 google.com 2>&1 | grep Date: | cut -d' ' -f5-8)Z"
hwclock -w

rm -rf ~/server*
rm -rf /var/log/*1
rm -rf /var/log/*2
rm -rf /var/log/*gz

localver=$(awk 'NR==1' /usr/local/bin/version.php)
remotever=$(curl -s https://raw.githubusercontent.com/jacyl4/de_GWD/master/version.php | awk 'NR==1')

if [[ $localver != $remotever ]]; then
crontab -l > ~/now.cron
sed -i '/autoUpdate/d' ~/now.cron
echo '30 4 * * *  /usr/local/bin/autoUpdate' >> ~/now.cron
crontab ~/now.cron
rm -rf ~/now.cron
fi
EOF
chmod +x /usr/local/bin/Q2H
/usr/local/bin/Q2H

crontab -l > ~/now.cron
sed -i '/\/usr\/local\/bin\/Q2H/d' ~/now.cron
echo '0 */2 * * * /usr/local/bin/Q2H' >> ~/now.cron
crontab ~/now.cron
rm -rf ~/now.cron

indexpage=$(ls /var/www/html/index.* 2> /dev/null | wc -l)
if [ "$indexpage" = "0" ]; then 
wget https://raw.githubusercontent.com/jacyl4/de_GWD/master/resource/sample.zip
unzip sample.zip
rsync -azrI ~/sample/* /var/www/html/
rm -rf ~/sample*
fi

wget -O /usr/local/bin/version.php https://raw.githubusercontent.com/jacyl4/de_GWD/master/version.php
}




installGWD(){
    green "=================="
    green " Input VPS domain"
    green "=================="
    read vpsdomain

cd ~

v2uuids=$(cat /proc/sys/kernel/random/uuid)
v2path="/$(echo $v2uuids | awk '{print substr($0,length($1)-5)}')"

ethernetnum=$(ip --oneline link show up | grep -v "lo" | awk '{print $2}' | cut -d':' -f1 | cut -d'@' -f1 | awk 'NR==1{print}')
localaddr=$(ip a | grep "$ethernetnum" | awk '{print $2}' | awk 'END {print}' | cut -d'/' -f1)
gatewayaddr=$(ip route show | awk '/'$ethernetnum'/ {print$3;exit}')

cat << EOF > /etc/network/interfaces
source /etc/network/interfaces.d/*

auto lo
iface lo inet loopback

auto $ethernetnum
iface $ethernetnum inet static
  address $localaddr
  netmask 255.255.255.0
  gateway $gatewayaddr
EOF

preInstall

cat << EOF > /etc/apt/sources.list
deb http://deb.debian.org/debian/ $(cat /etc/os-release | grep VERSION= | cut -d '(' -f2 | cut -d ')' -f1) main
deb http://security.debian.org/debian-security $(cat /etc/os-release | grep VERSION= | cut -d '(' -f2 | cut -d ')' -f1)/updates main
deb http://deb.debian.org/debian/ $(cat /etc/os-release | grep VERSION= | cut -d '(' -f2 | cut -d ')' -f1)-updates main
EOF

apt update && apt install -y sudo locales net-tools dnsutils wget curl rsync git jq unzip netcat socat ca-certificates apt-transport-https gnupg2
source /etc/profile

echo "en_US.UTF-8 UTF-8" > /etc/locale.gen
cat << EOF > /etc/default/locale
LANG=en_US.UTF-8
LANGUAGE=en_US.UTF-8
LC_CTYPE="en_US.UTF-8"
LC_NUMERIC="en_US.UTF-8"
LC_TIME="en_US.UTF-8"
LC_COLLATE="en_US.UTF-8"
LC_MONETARY="en_US.UTF-8"
LC_MESSAGES="en_US.UTF-8"
LC_PAPER="en_US.UTF-8"
LC_NAME="en_US.UTF-8"
LC_ADDRESS="en_US.UTF-8"
LC_TELEPHONE="en_US.UTF-8"
LC_MEASUREMENT="en_US.UTF-8"
LC_IDENTIFICATION="en_US.UTF-8"
LC_ALL=en_US.UTF-8
EOF
locale-gen en_US.UTF-8

echo "deb [arch=amd64] https://download.docker.com/linux/debian $(cat /etc/os-release | grep VERSION= | cut -d '(' -f2 | cut -d ')' -f1) stable" > /etc/apt/sources.list.d/docker.list
curl -fsSL https://download.docker.com/linux/debian/gpg | apt-key add -

apt update && apt install -y docker-ce docker-ce-cli containerd.io

systemctl enable docker
systemctl restart docker

installIptablesRules

installPihole

sed -i "/static ip_address=/d" /etc/dhcpcd.conf
sed -i "/static routers=/d" /etc/dhcpcd.conf
sed -i "/static domain_name_servers=/d" /etc/dhcpcd.conf

echo -e "static ip_address=$localaddr/32" >> /etc/dhcpcd.conf
echo -e "static routers=$gatewayaddr" >> /etc/dhcpcd.conf
echo -e "static domain_name_servers=127.0.0.1" >> /etc/dhcpcd.conf

installDOHser

installV2ray

nginxConf

launchNginx

makeSSL_W

nginxWebConf

postInstall

blue "--------------------------------------------"
blue  "Install de_GWD [done]"
echo
blue "Domain： $(yellow "$vpsdomain")"
blue "UUID：   $(yellow "$v2uuids")"
blue "PATH：   $(yellow "$v2path")"
blue "--------------------------------------------"
}



installBBRplus(){
apt install -y wget
mkdir -p ~/bbrkernel && cd ~/bbrkernel
wget --no-check-certificate https://raw.githubusercontent.com/jacyl4/de_GWD/master/resource/linux-headers-4.14.129-bbrplus.deb
wget --no-check-certificate https://raw.githubusercontent.com/jacyl4/de_GWD/master/resource/linux-image-4.14.129-bbrplus.deb
dpkg -i linux-headers-*.deb
dpkg -i linux-image-*.deb
update-grub

cat << EOF > ~/bbrkernel/clearkernel
#!/bin/bash
PATH='/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'

sed -i "/net.core.default_qdisc/d" /etc/sysctl.conf
sed -i "/net.ipv4.tcp_congestion_control/d" /etc/sysctl.conf
echo "net.core.default_qdisc = fq" >> /etc/sysctl.conf
echo "net.ipv4.tcp_congestion_control = bbrplus" >> /etc/sysctl.conf
sysctl -p

crontab -l > ~/now.cron
sed -i '/clearkernel/d' ~/now.cron
crontab ~/now.cron
rm -rf ~/now.cron
rm -rf ~/bbrkernel
EOF

chmod +x ~/bbrkernel/clearkernel

crontab -l > ~/now.cron
echo '@reboot ~/bbrkernel/clearkernel' >> ~/now.cron
crontab ~/now.cron
rm -rf ~/now.cron

blue "-----------------------"
blue  "Install bbrplus [done]"
blue "-----------------------"

reboot
}



installNextcloud(){
    green "=================="
    green " Datadase user"
    green "=================="
    read sqluser

    green "=================="
    green " Datadase password"
    green "=================="
    read sqlpw

    green "=================="
    green " Datadase name"
    green "=================="
    read sqlname

apt update && apt install -y software-properties-common dirmngr

dpkg --configure -a

echo "deb [arch=amd64] http://mariadb.nethub.com.hk/repo/10.3/debian $(cat /etc/os-release | grep VERSION= | cut -d '(' -f2 | cut -d ')' -f1) main" > /etc/apt/sources.list.d/mariadb.list
apt-key adv --recv-keys --keyserver keyserver.ubuntu.com 0xF1656F24C74CD1D8

apt update && apt install -y mariadb-server

mysql_secure_installation

green "再次输入刚创建的MariaDB root用户密码"
read sqlrootpw

cat << EOF > ~/.my.cnf
[client]
user=root
password=$sqlrootpw
EOF

mysql -e "create database $sqlname default charset utf8 collate utf8_general_ci;"
mysql -e "CREATE USER '$sqluser'@'localhost' IDENTIFIED BY '$sqlpw';"
mysql -e "grant all privileges on $sqlname.* TO '$sqluser'@'localhost';"

rm -rf ~/.my.cnf

sed -i "/bind-address/s/^/#/g" /etc/mysql/my.cnf
sed -i '/skip-networking = 1/d' /etc/mysql/my.cnf
sed -i '/skip-networking/a\skip-networking = 1' /etc/mysql/my.cnf

systemctl restart mariadb

wget -O /etc/apt/trusted.gpg.d/php.gpg https://packages.sury.org/php/apt.gpg
echo "deb https://packages.sury.org/php/ $(cat /etc/os-release | grep VERSION= | cut -d '(' -f2 | cut -d ')' -f1) main" > /etc/apt/sources.list.d/php.list

apt update && apt install -y php7.4 php7.4-fpm php7.4-cli php7.4-common php7.4-dev php7.4-mysql php7.4-curl php7.4-dom php-dompdf php7.4-json php7.4-gd php7.4-mbstring php7.4-zip php7.4-bz2 php7.4-ldap php7.4-smbclient php7.4-imap php7.4-gmp php7.4-redis php7.4-imagick php7.4-opcache php7.4-xml php7.4-xmlrpc php7.4-intl php7.4-apcu php-redis redis-server imagemagick ffmpeg

cat << EOF > /etc/php/7.4/fpm/php-fpm.conf
[global]
pid = /run/php/php7.4-fpm.pid
error_log = /var/log/php7.4-fpm.log

emergency_restart_threshold = 20
emergency_restart_interval = 60s
process_control_timeout = 10s
daemonize = yes

rlimit_files = 1000000
rlimit_core = 0

include=/etc/php/7.4/fpm/pool.d/*.conf
EOF

cat << EOF > /etc/php/7.4/fpm/pool.d/www.conf
[www]
user = www-data
group = www-data
listen = /run/php/php7.4-fpm.sock
listen.owner = www-data
listen.group = www-data
listen.backlog = -1
listen.allowed_clients = 127.0.0.1
listen.mode = 0666

pm = dynamic
pm.max_children = 20
pm.start_servers = 5
pm.min_spare_servers = 5
pm.max_spare_servers = 20
pm.max_requests = 500
pm.process_idle_timeout = 10s
request_terminate_timeout = 320s
request_slowlog_timeout = 0

pm.status_path = /status

catch_workers_output = yes
env[HOSTNAME] = \$HOSTNAME
env[PATH] = /usr/local/bin:/usr/bin:/bin
env[TMP] = /tmp
env[TMPDIR] = /tmp
env[TEMP] = /tmp
EOF

sed -i "/cgi.fix_pathinfo=/c\cgi.fix_pathinfo=0" /etc/php/7.4/fpm/php.ini

sed -i "/memory_limit/c\memory_limit = 512M" /etc/php/7.4/fpm/php.ini
echo "apc.enable_cli = 1" >> /etc/php/7.4/fpm/php.ini

rm -rf /lib/systemd/system/php7.4-fpm.service
cat << "EOF" > /lib/systemd/system/php7.4-fpm.service
[Unit]
Description=The PHP 7.4 FastCGI Process Manager
After=network.target
Wants=network.target

[Service] 
Type=notify
PIDFile=/run/php/php7.4-fpm.pid
ExecStart=/usr/sbin/php-fpm7.4 --nodaemonize --fpm-config /etc/php/7.4/fpm/php-fpm.conf
ExecReload=/bin/kill -USR2 $MAINPID
Restart=always
RestartSec=5
LimitNPROC=1000000
LimitNOFILE=1000000

[Install]
WantedBy=multi-user.target
EOF

systemctl daemon-reload > /dev/null 2>&1
systemctl enable php7.4-fpm
systemctl restart php7.4-fpm

vpsdomain=$(cd /var/www/ssl/ && ls 2>&1 | grep *key | rev | cut -d . -f1 --complement | rev)
v2path=$(jq -r '.inbounds[0].streamSettings.wsSettings.path' /etc/vtrui/config.json)

nginxNextcloudConf

launchNginx

wget -O ~/setup-nextcloud.php https://download.nextcloud.com/server/installer/setup-nextcloud.php
mv -f ~/setup-nextcloud.php /var/www/html/
chown -R www-data:www-data /var/www/html/
chmod -R 755 /var/www/html

blue "------------------------------------"
blue "  Datadase user:"
yellow "$sqluser"
blue "  Datadase password:"
yellow "$sqlpw"
blue "  Datadase name:"
yellow "$sqlname"
blue "  Nextcloud Installation address:"
yellow "$vpsdomain/setup-nextcloud.php"
blue "------------------------------------"
}



setNextcloudCache(){
sed -i "/port 6379/c\port 0" /etc/redis/redis.conf
sed -i "/unixsocket \/var\/run\/redis\/redis/c\unixsocket \/run\/redis\/redis-server.sock" /etc/redis/redis.conf
sed -i "/unixsocketperm 700/c\unixsocketperm 770" /etc/redis/redis.conf

sed -i '/installed/,$d' /var/www/html/nextcloud/config/config.php

cat << "EOF" >> /var/www/html/nextcloud/config/config.php
'installed' => true,

'enabledPreviewProviders' =>
  array (
    0 => 'OC\Preview\PNG',
    1 => 'OC\Preview\JPEG',
    2 => 'OC\Preview\GIF',
    3 => 'OC\Preview\HEIC',
    4 => 'OC\Preview\BMP',
    5 => 'OC\Preview\XBitmap',
    6 => 'OC\Preview\MP3',
    7 => 'OC\Preview\TXT',
    8 => 'OC\Preview\MarkDown',
    9 => 'OC\Preview\Movie',
    10 => 'OC\Preview\PDF',
  ),

'memcache.local' => '\\OC\\Memcache\\APCu',
'memcache.distributed' => '\\OC\\Memcache\\Redis',
'memcache.locking' => '\\OC\\Memcache\\Redis',
'filelocking.enabled' => true,
'filelocking.ttl' => 60*60,
'filelocking.debug' => false,
'redis' =>
  array (
    'host' => '/var/run/redis/redis-server.sock',
    'port' => 0,
    'timeout' => 0.0,
  ),
'max_filesize_animated_gifs_public_sharing' => -1,
'loglevel' => 0,
);
EOF

sudo usermod -aG redis www-data

sudo chown -R redis:www-data /run/redis

systemctl restart redis-server

systemctl restart php7.4-fpm

docker restart nginx > /dev/null 2>&1

blue "-----------------------------"
blue "Config Nextcloud cache [done]"
blue "-----------------------------"
}



changeStaticIP(){
    green "========="
    green "Address"
    green "========="
    read localaddr

    green "========="
    green "Gateway"
    green "========="
    read gatewayaddr

sed -i "/address/c\address $localaddr"  /etc/network/interfaces
sed -i "/gateway/c\gateway $gatewayaddr"  /etc/network/interfaces
sed -i "/IPV4_ADDRESS=/c\IPV4_ADDRESS=$localaddr/24"  /etc/pihole/setupVars.conf

sed -i "/static ip_address=/d" /etc/dhcpcd.conf
sed -i "/static routers=/d" /etc/dhcpcd.conf
sed -i "/static domain_name_servers=/d" /etc/dhcpcd.conf

echo -e "static ip_address=$localaddr/32" >> /etc/dhcpcd.conf
echo -e "static routers=$gatewayaddr" >> /etc/dhcpcd.conf
echo -e "static domain_name_servers=127.0.0.1" >> /etc/dhcpcd.conf

reboot
blue "-----------------"
blue  "Change IP [done]"
blue "-----------------"
}



changeDomain(){
    green "======================"
    green " Input the new domain"
    green "======================"
    read vpsdomain

v2path=$(jq -r '.inbounds[0].streamSettings.wsSettings.path' /etc/vtrui/config.json)

rm -rf /var/www/ssl

makeSSL_W

if [[ -d "/var/www/html/nextcloud" ]]; then
  nginxNextcloudConf
else
  nginxWebConf
fi

docker restart nginx > /dev/null 2>&1

blue "-----------------------------------------------"
blue "Change domain and issue new certificates [done]"
blue "-----------------------------------------------"
}



changeV2rayVerify(){
    green "=========="
    green " New UUID"
    green "=========="
    read nuuid

    green "=========="
    green " New path"
    green "=========="
    read npath

sed -i "$(sed -n -e '/location/=' /etc/nginx/conf.d/default.conf | awk 'END{print}')s/.*/location "'\'$npath''" {/" /etc/nginx/conf.d/default.conf

docker restart nginx > /dev/null 2>&1

jq --arg nuuid "$nuuid" '.inbounds[0].settings.clients[0].id=$nuuid' /etc/vtrui/config.json |\
jq --arg npath "$npath" '.inbounds[0].streamSettings.wsSettings.path=$npath' > /etc/vtrui/temp.json && mv -f /etc/vtrui/temp.json /etc/vtrui/config.json

systemctl restart vtrui > /dev/null 2>&1
blue "------------------------------"
blue  "Change v2ray UUID&path [done]"
blue "------------------------------"
}



updatePihole(){
ethernetnum=$(ip --oneline link show up | grep -v "lo" | awk '{print$2;exit}' | cut -d':' -f1 | cut -d'@' -f1)
localaddr=$(ip a | grep "$ethernetnum" | awk '{print $2}' | awk 'END {print}' | cut -d'/' -f1)

installPihole

blue "---------------------"
blue "Update Pi-hole [done]"
blue "---------------------"
}



updateGWD(){
ethernetnum=$(ip --oneline link show up | grep -v "lo" | awk '{print$2;exit}' | cut -d':' -f1 | cut -d'@' -f1)
localaddr=$(ip a | grep "$ethernetnum" | awk '{print $2}' | awk 'END {print}' | cut -d'/' -f1)

vpsdomain=$(awk '/server_name/ {print$2;exit}' /etc/nginx/conf.d/default.conf | sed 's/.$//')
v2uuids=$(jq -r '.inbounds[0].settings.clients[].id' /etc/vtrui/config.json)
v2path=$(jq -r '.inbounds[0].streamSettings.wsSettings.path' /etc/vtrui/config.json)

cd ~
source /etc/profile

preInstall

installIptablesRules

installDOHser

installV2ray

nginxConf

if [[ -d "/var/www/html/nextcloud" ]]; then
  nginxNextcloudConf
else
  nginxWebConf
fi

postInstall

launchNginx
blue "---------------------"
blue  "Update de_GWD [done]"
blue "---------------------"
}



autoUpdateGWD(){
    green "=============================================="
    green "Y. Turn on AutoUpdate / N. Turn off AutoUpdate"
    green "=============================================="
    read autoUpdateswitch

if [[ "$autoUpdateswitch" = "Y" ]] || [[ "$autoUpdateswitch" = "y" ]]; then 
sed -i '/localver=/,$d' /usr/local/bin/Q2H

cat << "EOF" >> /usr/local/bin/Q2H
localver=$(awk 'NR==1' /usr/local/bin/version.php)
remotever=$(curl -s https://raw.githubusercontent.com/jacyl4/de_GWD/master/version.php | awk 'NR==1')

if [[ $localver != $remotever ]]; then
crontab -l > ~/now.cron
sed -i '/autoUpdate/d' ~/now.cron
echo '30 4 * * *  /usr/local/bin/autoUpdate' >> ~/now.cron
crontab ~/now.cron
rm -rf ~/now.cron
fi
EOF
blue "--------------------------"
blue  "AutoUpdate turn on [done]"
blue "--------------------------"

elif [[ "$autoUpdateswitch" = "N" ]] || [[ "$autoUpdateswitch" = "n" ]]; then
sed -i '/localver=/,$d' /usr/local/bin/Q2H
blue "---------------------------"
blue  "AutoUpdate turn off [done]"
blue "---------------------------"
fi
}




start_menu(){
statusGOOD=$(green "✓")
statusBAD=$(red "✕")
statusNONE=$(yellow "-")

if [[ $(systemctl is-active pihole-FTL) = "active" ]]; then
    echo "[$statusGOOD] Pi-hole      [working]"
elif [[ ! -f "/usr/local/bin/pihole" ]]; then
    echo "[$statusBAD] Pi-hole      [not installed]"
else
    echo "[$statusBAD] Pi-hole      [start failed]"
fi

if [[ $(systemctl is-active doh-server) = "active" ]]; then
    echo "[$statusGOOD] DoH server   [working]"
elif [[ ! -f "/usr/local/bin/doh-server" ]]; then
    echo "[$statusBAD] DoH server   [not Installed]"
else
    echo "[$statusBAD] DoH server   [start failed]"
fi

if [[ $(systemctl is-active vtrui) = "active" ]]; then
    echo "[$statusGOOD] V2RAY        [working]"
elif [[ ! -d "/usr/bin/vtrui" ]]; then
    echo "[$statusBAD] V2RAY        [not Installed]"
else
    echo "[$statusBAD] V2RAY        [start failed]"
fi

if [[ $(systemctl is-active docker) = "active" ]]; then
    echo "[$statusGOOD] Docker       [working]"
elif [[ ! -f "/usr/bin/docker" ]]; then
    echo "[$statusBAD] Docker       [not installed]"
else
    echo "[$statusBAD] Docker       [start failed]"
fi


if [[ -d "/var/www/html/nextcloud" ]]; then
    echo "[$statusGOOD] Nextcloud    [installed]"
else
    echo "[$statusNONE] Nextcloud    [not installed]"
fi

blue "---------------------------"
blue  "当前bbr方案：$(echo $(sysctl net.ipv4.tcp_congestion_control) | cut -d ' ' -f3)"
blue "---------------------------"

    green "==========================="
    green "       SERVER"
    green "Recommend: Debian 9"
    green "Author:    JacyL4"
    green "==========================="
if [[ -f "/usr/local/bin/version.php" ]]; then
    blue  "Version:$(echo $(awk 'NR==1' /usr/local/bin/version.php))"
fi
    echo
    green  "1. Install de_GWD"
    green  "2. Install bbrplus and reboot（only Debian 9）"
    blue   "3. Install PHP+MariaDB+Nextcloud"
    blue   "4. Config Nextcloud cache"
    red    "5. Change static IP"
    red    "6. Change domain and issue new certificates"
    red    "7. Change v2ray UUID & path"
    yellow "9. Update Pi-hole"
    yellow "0. Update de_GWD"
    red    "00.AutoUpdate turn on/off"
    red    "CTRL+C EXIT"
    echo
    read -p "Select:" num
    case "$num" in
    1)
    installGWD
    start_menu
    ;;
    2)
    installBBRplus
    start_menu
    ;;
    3)
    installNextcloud
    start_menu
    ;;
    4)
    setNextcloudCache
    start_menu
    ;;
    5)
    changeStaticIP
    start_menu
    ;;
    6)
    changeDomain
    start_menu
    ;;
    7)
    changeV2rayVerify
    start_menu
    ;;
    9)
    updatePihole
    start_menu
    ;;
    0)
    updateGWD
    start_menu
    ;;
    00)
    autoUpdateGWD
    start_menu
    ;;
    *)
    clear
    red "Wrong number"
    sleep 1s
    start_menu
    ;;
    esac
}

start_menu